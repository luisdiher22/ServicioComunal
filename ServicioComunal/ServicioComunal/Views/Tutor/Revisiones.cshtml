@model List<ServicioComunal.Models.Entrega>
@{
    ViewData["Title"] = "Revisiones";
    ViewData["UserRole"] = "Tutor";
    ViewData["UserCedula"] = "2-3456-7890";
    ViewData["NotificationCount"] = "1";
    Layout = "_Layout";
}

<div class="dashboard-content tutor-theme">
    <div class="content-header">
        <h1>Revisiones</h1>
        @if (ViewBag.GrupoFiltrado != null)
        {
            <p>Entregables del <strong>Grupo @ViewBag.GrupoFiltrado</strong></p>
            <div class="alert alert-info d-flex align-items-center">
                <i class="fas fa-filter me-2"></i>
                Mostrando solo entregas del Grupo @ViewBag.GrupoFiltrado
                <a href="@Url.Action("Revisiones", "Tutor")" class="btn btn-sm btn-outline-secondary ms-auto">
                    <i class="fas fa-times"></i> Ver todos los grupos
                </a>
            </div>
        }
        else
        {
            <p>Entregables por revisar de tus grupos asignados</p>
        }
    </div>

    <!-- Filtro de grupos fuera del grid -->
    <div class="filtros-section mb-2" style="margin-top: -15px;">
        <div class="card">
            <div class="card-body py-2">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <label for="filtroGrupo" class="form-label mb-0">Filtrar por grupo:</label>
                        <select class="form-select form-select-sm" id="filtroGrupo" onchange="cambiarGrupo()">
                            <option value="">Todos los grupos</option>
                            @if (ViewBag.GruposAsignados != null)
                            {
                                @foreach (int grupoNum in ViewBag.GruposAsignados)
                                {
                                    <option value="@grupoNum" @(ViewBag.GrupoFiltrado == grupoNum ? "selected" : "")>
                                        Grupo @grupoNum
                                    </option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-6 text-end">
                        <small class="text-muted">
                            @if (ViewBag.GrupoFiltrado != null)
                            {
                                <span>Grupo específico seleccionado</span>
                            }
                            else
                            {
                                <span>Mostrando todos los grupos asignados</span>
                            }
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="revisiones-container">
        <div class="entregables-lista">
            <div class="lista-header">
                <h3>Entregables por Revisar</h3>
                <span class="contador">@(Model?.Count(e => string.IsNullOrEmpty(e.Retroalimentacion) && !string.IsNullOrEmpty(e.ArchivoRuta)) ?? 0) entregables listos para revisión</span>
            </div>

            @if (Model != null && Model.Any())
            {
                var entregasOrdenadas = Model
                    .OrderBy(e => {
                        var tieneRetroalimentacion = !string.IsNullOrEmpty(e.Retroalimentacion);
                        var tieneArchivo = !string.IsNullOrEmpty(e.ArchivoRuta);
                        
                        if (!tieneRetroalimentacion && tieneArchivo) return 1; // Listo para revisión
                        if (!tieneRetroalimentacion && !tieneArchivo) return 2; // Pendiente
                        if (tieneRetroalimentacion && e.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS")) return 3; // Cambios solicitados
                        if (tieneRetroalimentacion && e.Retroalimentacion.StartsWith("APROBADO:")) return 4; // Aprobados
                        return 5; // Otros casos
                    })
                    .ThenByDescending(e => e.FechaEntrega ?? DateTime.MinValue) // Fecha de mayor a menor
                    .ToList();
                <div class="entregables-grid">
                    @foreach (var entrega in entregasOrdenadas)
                    {
                        var liderGrupo = entrega.Grupo.Lider; // Obtener el líder del grupo que realizó la entrega
                        var tieneRetroalimentacion = !string.IsNullOrEmpty(entrega.Retroalimentacion);
                        var tieneArchivo = !string.IsNullOrEmpty(entrega.ArchivoRuta);
                        
                        var esPendiente = !tieneRetroalimentacion && !tieneArchivo;
                        var esListoParaRevision = !tieneRetroalimentacion && tieneArchivo;
                        var esAprobado = tieneRetroalimentacion && entrega.Retroalimentacion.StartsWith("APROBADO:");
                        var tieneCambios = tieneRetroalimentacion && entrega.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS");
                        
                        <div class="entregable-item @(esPendiente ? "pendiente" : (esListoParaRevision ? "listo-revision" : (esAprobado ? "aprobado" : "cambios")))" 
                             onclick="mostrarDetalle(@entrega.Identificacion)">
                            <div class="entregable-header">
                                <div class="entregable-info">
                                    <h4>@entrega.Nombre</h4>
                                    <div class="entregable-meta">
                                        <span class="grupo"><i class="fas fa-users"></i> Grupo @entrega.Grupo.Numero</span>
                                        <span class="estudiante">
                                            <i class="fas fa-user"></i> 
                                            @if (liderGrupo != null)
                                            {
                                                @liderGrupo.Nombre @liderGrupo.Apellidos
                                                <i class="fas fa-crown text-warning ms-1" title="Líder del grupo"></i>
                                            }
                                            else
                                            {
                                                <text>Líder no asignado</text>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="entregable-status">
                                    @if (esPendiente)
                                    {
                                        <span class="badge badge-pending">Pendiente</span>
                                    }
                                    else if (esListoParaRevision)
                                    {
                                        <span class="badge badge-ready">Listo para Revisión</span>
                                    }
                                    else if (esAprobado)
                                    {
                                        <span class="badge badge-approved">Aprobado</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-changes">Cambios Solicitados</span>
                                    }
                                </div>
                            </div>
                            <div class="entregable-footer">
                                <div class="fecha-limite">
                                    <i class="fas fa-calendar-alt"></i>
                                    <span>Entregado: @(entrega.FechaEntrega?.ToString("dd/MM/yyyy") ?? "No entregado")</span>
                                </div>
                                @if (tieneRetroalimentacion && entrega.FechaRetroalimentacion.HasValue)
                                {
                                    <div class="fecha-revision">
                                        <i class="fas fa-check-circle"></i>
                                        <span>Revisado: @entrega.FechaRetroalimentacion.Value.ToString("dd/MM/yyyy")</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-entregables">
                    <i class="fas fa-clipboard-list"></i>
                    <h3>No hay entregables</h3>
                    <p>No tienes entregables para revisar en este momento.</p>
                </div>
            }
        </div>

        <div class="detalle-entregable" id="detalleEntregable">
            <div class="detalle-header">
                <h3>Revisar Entregable</h3>
                <span class="detalle-subtitle">Selecciona un entregable de la lista para revisar</span>
            </div>
            <div class="detalle-placeholder">
                <i class="fas fa-arrow-left"></i>
                <p>Selecciona un entregable de la lista para ver sus detalles y realizar la revisión.</p>
            </div>
        </div>
    </div>
</div>

<!-- Template para el detalle del entregable -->
<div id="detalleTemplate" style="display: none;">
    <div class="detalle-header">
        <h3 id="detalleTitulo">Título del Entregable</h3>
        <span class="detalle-subtitle" id="detalleSubtitulo">Información del entregable</span>
    </div>
    
    <div class="detalle-content">
        <div class="info-entregable">
            <div class="info-section">
                <h4><i class="fas fa-info-circle"></i> Información del Entregable</h4>
                <div class="info-grid">
                    <div class="info-item">
                        <label>Estudiante:</label>
                        <span id="detalleEstudiante">-</span>
                    </div>
                    <div class="info-item">
                        <label>Grupo:</label>
                        <span id="detalleGrupo">-</span>
                    </div>
                    <div class="info-item">
                        <label>Fecha de envío:</label>
                        <span id="detalleFecha">-</span>
                    </div>
                </div>
                <div class="archivo-section">
                    <button class="btn btn-outline-primary btn-download" id="btnDescargar">
                        <i class="fas fa-download"></i> Descargar Archivo
                    </button>
                </div>
            </div>
        </div>

        <div class="comentarios-section">
            <h4><i class="fas fa-comments"></i> Comentarios y Retroalimentación</h4>
            <textarea id="comentariosTextarea" 
                      class="form-control comentarios-input" 
                      rows="4" 
                      placeholder="Escribe tus comentarios para el estudiante..."></textarea>
        </div>

        <div class="acciones-section">
            <button class="btn btn-success btn-lg" id="btnAprobar">
                <i class="fas fa-check"></i> Aprobar
            </button>
            <button class="btn btn-warning btn-lg" id="btnSolicitarCambios">
                <i class="fas fa-edit"></i> Solicitar Cambios
            </button>
            <button class="btn btn-secondary btn-lg" id="btnRevertir" style="display: none;">
                <i class="fas fa-undo"></i> Revertir Revisión
            </button>
        </div>
    </div>
</div>

<style>
/* Estilos específicos para Revisiones */
.revisiones-container {
    display: grid;
    grid-template-columns: 1fr 440px;
    gap: 18px;
    height: calc(100vh - 160px);
    align-items: flex-start;
    margin-top: 10px;
}

.entregables-lista {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(139, 119, 101, 0.08);
    border: 1px solid #e0d5c7;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    min-height: 520px;
    max-height: 80vh;
}

.lista-header {
    padding: 20px 24px;
    background: linear-gradient(135deg, #f5f1e8 0%, #ede4d3 100%);
    border-bottom: 1px solid #e0d5c7;
}

.lista-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 4px 0;
}

.contador {
    font-size: 14px;
    color: #6c757d;
}

.entregables-grid {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.entregable-item {
    padding: 16px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    cursor: pointer;
    transition: all 0.2s ease;
    background: #f8f9fa;
}

.entregable-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(139, 119, 101, 0.1);
}

.entregable-item.pendiente {
    border-left: 4px solid #d4a574;
}

.entregable-item.listo-revision {
    border-left: 4px solid #17a2b8;
    background: #e7f4ff;
}

.entregable-item.aprobado {
    border-left: 4px solid #7a8471;
}

.entregable-item.cambios {
    border-left: 4px solid #c1666b;
}

.entregable-item.selected {
    background: #ede4d3;
    border-color: #8b7765;
}

.entregable-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
}

.entregable-info h4 {
    font-size: 16px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 4px 0;
}

.entregable-meta {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.entregable-meta span {
    font-size: 12px;
    color: #6c757d;
    display: flex;
    align-items: center;
    gap: 4px;
}

.entregable-meta i {
    color: #8b7765;
    width: 12px;
}

.entregable-footer {
    display: flex;
    justify-content: space-between;
    font-size: 11px;
    color: #8b7765;
}

.entregable-footer > div {
    display: flex;
    align-items: center;
    gap: 4px;
}

.detalle-entregable {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(139, 119, 101, 0.08);
    border: 1px solid #e0d5c7;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    position: sticky;
    top: 8px;
    height: fit-content;
    min-height: 340px;
    max-height: 80vh;
}

.detalle-header {
    padding: 20px 24px;
    background: linear-gradient(135deg, #f5f1e8 0%, #ede4d3 100%);
    border-bottom: 1px solid #e0d5c7;
}

.detalle-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 4px 0;
}

.detalle-subtitle {
    font-size: 14px;
    color: #6c757d;
}

.detalle-placeholder {
    padding: 60px 24px;
    text-align: center;
    color: #8b7765;
}

.detalle-placeholder i {
    font-size: 32px;
    margin-bottom: 16px;
    opacity: 0.6;
}

.detalle-placeholder p {
    color: #6c757d;
    font-size: 14px;
    line-height: 1.4;
}

.detalle-content {
    padding: 24px;
    overflow-y: auto;
}

.info-section h4,
.comentarios-section h4 {
    font-size: 16px;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.info-section h4 i,
.comentarios-section h4 i {
    color: #8b7765;
}

.info-grid {
    display: grid;
    gap: 12px;
    margin-bottom: 16px;
}

.info-item {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid #f0f0f0;
}

.info-item label {
    font-weight: 500;
    color: #6c757d;
    font-size: 14px;
}

.info-item span {
    color: #2c3e50;
    font-size: 14px;
    text-align: right;
}

.archivo-section {
    margin-bottom: 24px;
}

.btn-download {
    width: 100%;
}

.comentarios-section {
    margin-bottom: 24px;
}

.comentarios-input {
    border: 1px solid #e0d5c7;
    border-radius: 8px;
    font-size: 14px;
    resize: vertical;
}

.comentarios-input:focus {
    border-color: #8b7765;
    box-shadow: 0 0 0 2px rgba(139, 119, 101, 0.1);
}

.acciones-section {
    display: flex;
    gap: 12px;
}

.acciones-section .btn {
    flex: 1;
}

.empty-entregables {
    text-align: center;
    padding: 60px 20px;
    color: #6c757d;
}

.empty-entregables i {
    font-size: 48px;
    margin-bottom: 16px;
    opacity: 0.5;
    color: #c4a484;
}

.empty-entregables h3 {
    font-size: 18px;
    margin-bottom: 8px;
    color: #2c3e50;
}

/* Responsive */
@@media (max-width: 992px) {
    .revisiones-container {
        grid-template-columns: 1fr;
        gap: 20px;
        height: auto;
    }
    
    .detalle-entregable {
        position: static;
        max-height: none;
    }
}

/* Estilos para badges */
.badge {
    display: inline-block;
    padding: 0.25em 0.4em;
    font-size: 75%;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 0.25rem;
}

.badge-pending {
    color: #856404;
    background-color: #fff3cd;
}

.badge-ready {
    color: #0c5460;
    background-color: #d1ecf1;
}

.badge-approved {
    color: #155724;
    background-color: #d4edda;
}

.badge-changes {
    color: #721c24;
    background-color: #f8d7da;
}
</style>

<script>
let entregableSeleccionado = null;
let entregablesData = [
    @foreach (var entrega in Model ?? new List<ServicioComunal.Models.Entrega>())
    {
        var liderGrupo = entrega.Grupo.Lider; // Obtener el líder del grupo que realizó la entrega
        <text>{
            identificacion: @entrega.Identificacion,
            nombre: "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(entrega.Nombre))",
            archivoRuta: "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(entrega.ArchivoRuta ?? ""))",
            fechaEntrega: "@(entrega.FechaEntrega?.ToString("yyyy-MM-ddTHH:mm:ss") ?? "")",
            fechaRetroalimentacion: "@(entrega.FechaRetroalimentacion?.ToString("yyyy-MM-ddTHH:mm:ss") ?? "")",
            retroalimentacion: "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(entrega.Retroalimentacion ?? ""))",
            grupo: {
                numero: @entrega.Grupo.Numero,
                lider: @if (liderGrupo != null)
                {
                    <text>{
                        nombre: "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(liderGrupo.Nombre))",
                        apellidos: "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(liderGrupo.Apellidos))"
                    }</text>
                }
                else
                {
                    <text>null</text>
                }
            }
        },</text>
    }
].filter(item => item.identificacion !== undefined);

function mostrarDetalle(entregaId) {
    // Remover selección anterior
    document.querySelectorAll('.entregable-item').forEach(item => {
        item.classList.remove('selected');
    });
    
    // Agregar selección al item actual
    event.currentTarget.classList.add('selected');
    
    // Encontrar el entregable en los datos
    const entregable = entregablesData.find(e => e.identificacion === entregaId);
    if (!entregable) return;
    
    entregableSeleccionado = entregable;
    
    // Obtener el template y clonarlo
    const template = document.getElementById('detalleTemplate');
    const detalle = document.getElementById('detalleEntregable');
    
    // Copiar el contenido del template
    detalle.innerHTML = template.innerHTML;
    
    // Llenar los datos
    document.getElementById('detalleTitulo').textContent = entregable.nombre;
    
    const liderGrupo = entregable.grupo.lider;
    document.getElementById('detalleEstudiante').innerHTML = 
        liderGrupo ? `${liderGrupo.nombre} ${liderGrupo.apellidos} <i class="fas fa-crown text-warning ms-1" title="Líder del grupo"></i>` : 'Líder no asignado';
    document.getElementById('detalleGrupo').textContent = `Grupo ${entregable.grupo.numero}`;
    document.getElementById('detalleFecha').textContent = entregable.fechaEntrega ? 
        new Date(entregable.fechaEntrega).toLocaleDateString('es-ES') : 'No entregado';
    
    // Configurar comentarios existentes
    const comentariosTextarea = document.getElementById('comentariosTextarea');
    if (entregable.retroalimentacion) {
        let comentariosSinPrefijo = entregable.retroalimentacion;
        if (comentariosSinPrefijo.startsWith('CAMBIOS SOLICITADOS: ')) {
            comentariosSinPrefijo = comentariosSinPrefijo.replace('CAMBIOS SOLICITADOS: ', '');
        } else if (comentariosSinPrefijo.startsWith('APROBADO: ')) {
            comentariosSinPrefijo = comentariosSinPrefijo.replace('APROBADO: ', '');
        }
        comentariosTextarea.value = comentariosSinPrefijo;
    }
    
    // Configurar botones
    const btnDescargar = document.getElementById('btnDescargar');
    if (entregable.archivoRuta) {
        btnDescargar.disabled = false;
        btnDescargar.onclick = () => descargarArchivo(entregaId);
    } else {
        btnDescargar.disabled = true;
        btnDescargar.onclick = null;
    }
    
    document.getElementById('btnAprobar').onclick = () => aprobarEntrega(entregaId);
    document.getElementById('btnSolicitarCambios').onclick = () => solicitarCambios(entregaId);
    document.getElementById('btnRevertir').onclick = () => revertirRetroalimentacion(entregaId, esAprobado);
    
    // Deshabilitar botones si ya está revisado
    const tieneRetroalimentacion = entregable.retroalimentacion;
    const tieneArchivo = entregable.archivoRuta;
    const esPendiente = !tieneRetroalimentacion && !tieneArchivo;
    const esListoParaRevision = !tieneRetroalimentacion && tieneArchivo;
    const esAprobado = tieneRetroalimentacion && entregable.retroalimentacion.startsWith("APROBADO:");
    const tieneCambiosSolicitados = tieneRetroalimentacion && entregable.retroalimentacion.startsWith("CAMBIOS SOLICITADOS:");
    
    document.getElementById('btnAprobar').disabled = !esListoParaRevision;
    document.getElementById('btnSolicitarCambios').disabled = !esListoParaRevision;
    
    // Mostrar botón de revertir si tiene cambios solicitados o está aprobada
    const btnRevertir = document.getElementById('btnRevertir');
    if (tieneCambiosSolicitados || esAprobado) {
        btnRevertir.style.display = 'inline-block';
        // Cambiar el texto del botón según el estado
        if (esAprobado) {
            btnRevertir.innerHTML = '<i class="fas fa-undo"></i> Revertir Aprobación';
        } else {
            btnRevertir.innerHTML = '<i class="fas fa-undo"></i> Revertir Cambios';
        }
    } else {
        btnRevertir.style.display = 'none';
    }

    if (esAprobado) {
        document.getElementById('detalleSubtitulo').textContent = 'Entregable aprobado';
    } else if (tieneCambiosSolicitados) {
        document.getElementById('detalleSubtitulo').textContent = 'Cambios solicitados';
    } else if (tieneRetroalimentacion) {
        document.getElementById('detalleSubtitulo').textContent = 'Entregable ya revisado';
    } else {
        document.getElementById('detalleSubtitulo').textContent = `Grupo ${entregable.grupo.numero} - ${estudiante?.nombre} ${estudiante?.apellidos}`;
    }
}

function descargarArchivo(entregaId) {
    // Crear un enlace temporal para la descarga
    const url = `@Url.Action("DescargarArchivo", "Tutor")?entregaId=${entregaId}`;
    const link = document.createElement('a');
    link.href = url;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function aprobarEntrega(entregaId) {
    const comentarios = document.getElementById('comentariosTextarea').value;
    
    if (!comentarios.trim()) {
        if (!confirm('¿Deseas aprobar sin comentarios?')) {
            return;
        }
    }
    
    fetch('@Url.Action("AprobarEntrega", "Tutor")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            entregaId: entregaId,
            comentarios: comentarios || 'Aprobado'
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Entregable aprobado correctamente');
            location.reload();
        } else {
            alert('Error al aprobar el entregable: ' + (data.message || 'Error desconocido'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al procesar la solicitud: ' + error.message);
    });
}

function solicitarCambios(entregaId) {
    const comentarios = document.getElementById('comentariosTextarea').value;
    
    if (!comentarios.trim()) {
        alert('Debes escribir comentarios explicando los cambios requeridos');
        return;
    }
    
    fetch('@Url.Action("SolicitarCambios", "Tutor")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            entregaId: entregaId,
            comentarios: comentarios
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Cambios solicitados correctamente');
            location.reload();
        } else {
            alert('Error al solicitar cambios: ' + (data.message || 'Error desconocido'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al procesar la solicitud: ' + error.message);
    });
}

function revertirRetroalimentacion(entregaId, esAprobada = false) {
    const mensaje = esAprobada 
        ? '¿Estás seguro de que quieres revertir esta APROBACIÓN? El estudiante ya fue notificado de la aprobación y volverá a estado pendiente.'
        : '¿Estás seguro de que quieres revertir estos cambios solicitados? La entrega volverá a estado pendiente.';
    
    if (!confirm(mensaje)) {
        return;
    }
    
    fetch('@Url.Action("RevertirRetroalimentacion", "Tutor")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            entregaId: entregaId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Revisión revertida exitosamente');
            location.reload();
        } else {
            alert('Error al revertir la revisión: ' + (data.message || 'Error desconocido'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al procesar la solicitud: ' + error.message);
    });
}

// Función para cambiar el filtro de grupo
function cambiarGrupo() {
    const selectGrupo = document.getElementById('filtroGrupo');
    const grupoSeleccionado = selectGrupo.value;
    
    if (grupoSeleccionado) {
        // Redirigir con el parámetro de grupo
        window.location.href = '@Url.Action("Revisiones", "Tutor")?grupo=' + grupoSeleccionado;
    } else {
        // Redirigir sin parámetros para mostrar todos los grupos
        window.location.href = '@Url.Action("Revisiones", "Tutor")';
    }
}
</script>

<script src="~/js/tutor.js"></script>
