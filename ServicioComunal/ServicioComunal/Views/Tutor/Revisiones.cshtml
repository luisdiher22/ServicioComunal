@model List<ServicioComunal.Models.Entrega>
@{
    ViewData["Title"] = "Revisiones";
    ViewData["UserRole"] = "Tutor";
    ViewData["UserCedula"] = "2-3456-7890";
    ViewData["NotificationCount"] = "1";
    Layout = "_Layout";
}

<div class="dashboard-content tutor-theme">
    <div class="content-header">
        <h1>Revisiones</h1>
        <p>Entregables por revisar de tus grupos asignados</p>
    </div>

    <div class="revisiones-container">
        <div class="entregables-lista">
            <div class="lista-header">
                <h3>Entregables por Revisar</h3>
                <span class="contador">@(Model?.Count(e => string.IsNullOrEmpty(e.Retroalimentacion)) ?? 0) entregables esperando tu revisión</span>
            </div>

            @if (Model != null && Model.Any())
            {
                <div class="entregables-grid">
                    @foreach (var entrega in Model.OrderBy(e => e.FechaLimite))
                    {
                        var estudiante = entrega.Grupo.GruposEstudiantes.FirstOrDefault()?.Estudiante;
                        var esPendiente = string.IsNullOrEmpty(entrega.Retroalimentacion);
                        var esAprobado = !string.IsNullOrEmpty(entrega.Retroalimentacion) && !entrega.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS");
                        var tieneCambios = !string.IsNullOrEmpty(entrega.Retroalimentacion) && entrega.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS");
                        
                        <div class="entregable-item @(esPendiente ? "pendiente" : (esAprobado ? "aprobado" : "cambios"))" 
                             onclick="mostrarDetalle(@entrega.Identificacion)">
                            <div class="entregable-header">
                                <div class="entregable-info">
                                    <h4>@entrega.Nombre</h4>
                                    <div class="entregable-meta">
                                        <span class="grupo"><i class="fas fa-users"></i> Grupo @entrega.Grupo.Numero</span>
                                        <span class="estudiante"><i class="fas fa-user"></i> @(estudiante?.Nombre) @(estudiante?.Apellidos)</span>
                                    </div>
                                </div>
                                <div class="entregable-status">
                                    @if (esPendiente)
                                    {
                                        <span class="badge badge-pending">Pendiente</span>
                                    }
                                    else if (esAprobado)
                                    {
                                        <span class="badge badge-approved">Aprobado</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-changes">Cambios Solicitados</span>
                                    }
                                </div>
                            </div>
                            <div class="entregable-footer">
                                <div class="fecha-limite">
                                    <i class="fas fa-calendar-alt"></i>
                                    <span>Entregado: @entrega.FechaLimite.ToString("dd/MM/yyyy")</span>
                                </div>
                                @if (!esPendiente)
                                {
                                    <div class="fecha-revision">
                                        <i class="fas fa-check-circle"></i>
                                        <span>Revisado: @entrega.FechaRetroalimentacion.ToString("dd/MM/yyyy")</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-entregables">
                    <i class="fas fa-clipboard-list"></i>
                    <h3>No hay entregables</h3>
                    <p>No tienes entregables para revisar en este momento.</p>
                </div>
            }
        </div>

        <div class="detalle-entregable" id="detalleEntregable">
            <div class="detalle-header">
                <h3>Revisar Entregable</h3>
                <span class="detalle-subtitle">Selecciona un entregable de la lista para revisar</span>
            </div>
            <div class="detalle-placeholder">
                <i class="fas fa-arrow-left"></i>
                <p>Selecciona un entregable de la lista para ver sus detalles y realizar la revisión.</p>
            </div>
        </div>
    </div>
</div>

<!-- Template para el detalle del entregable -->
<div id="detalleTemplate" style="display: none;">
    <div class="detalle-header">
        <h3 id="detalleTitulo">Título del Entregable</h3>
        <span class="detalle-subtitle" id="detalleSubtitulo">Información del entregable</span>
    </div>
    
    <div class="detalle-content">
        <div class="info-entregable">
            <div class="info-section">
                <h4><i class="fas fa-info-circle"></i> Información del Entregable</h4>
                <div class="info-grid">
                    <div class="info-item">
                        <label>Estudiante:</label>
                        <span id="detalleEstudiante">-</span>
                    </div>
                    <div class="info-item">
                        <label>Grupo:</label>
                        <span id="detalleGrupo">-</span>
                    </div>
                    <div class="info-item">
                        <label>Archivo:</label>
                        <span id="detalleArchivo">-</span>
                    </div>
                    <div class="info-item">
                        <label>Fecha de envío:</label>
                        <span id="detalleFecha">-</span>
                    </div>
                </div>
                <div class="archivo-section">
                    <button class="btn btn-outline-primary btn-download" id="btnDescargar">
                        <i class="fas fa-download"></i> Descargar Archivo
                    </button>
                </div>
            </div>
        </div>

        <div class="comentarios-section">
            <h4><i class="fas fa-comments"></i> Comentarios y Retroalimentación</h4>
            <textarea id="comentariosTextarea" 
                      class="form-control comentarios-input" 
                      rows="4" 
                      placeholder="Escribe tus comentarios para el estudiante..."></textarea>
        </div>

        <div class="acciones-section">
            <button class="btn btn-success btn-lg" id="btnAprobar">
                <i class="fas fa-check"></i> Aprobar
            </button>
            <button class="btn btn-warning btn-lg" id="btnSolicitarCambios">
                <i class="fas fa-edit"></i> Solicitar Cambios
            </button>
        </div>
    </div>
</div>

<style>
/* Estilos específicos para Revisiones */
.revisiones-container {
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: 24px;
    height: calc(100vh - 200px);
}

.entregables-lista {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(139, 119, 101, 0.08);
    border: 1px solid #e0d5c7;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.lista-header {
    padding: 20px 24px;
    background: linear-gradient(135deg, #f5f1e8 0%, #ede4d3 100%);
    border-bottom: 1px solid #e0d5c7;
}

.lista-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 4px 0;
}

.contador {
    font-size: 14px;
    color: #6c757d;
}

.entregables-grid {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.entregable-item {
    padding: 16px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    cursor: pointer;
    transition: all 0.2s ease;
    background: #f8f9fa;
}

.entregable-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(139, 119, 101, 0.1);
}

.entregable-item.pendiente {
    border-left: 4px solid #d4a574;
}

.entregable-item.aprobado {
    border-left: 4px solid #7a8471;
}

.entregable-item.cambios {
    border-left: 4px solid #c1666b;
}

.entregable-item.selected {
    background: #ede4d3;
    border-color: #8b7765;
}

.entregable-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
}

.entregable-info h4 {
    font-size: 16px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 4px 0;
}

.entregable-meta {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.entregable-meta span {
    font-size: 12px;
    color: #6c757d;
    display: flex;
    align-items: center;
    gap: 4px;
}

.entregable-meta i {
    color: #8b7765;
    width: 12px;
}

.entregable-footer {
    display: flex;
    justify-content: space-between;
    font-size: 11px;
    color: #8b7765;
}

.entregable-footer > div {
    display: flex;
    align-items: center;
    gap: 4px;
}

.detalle-entregable {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(139, 119, 101, 0.08);
    border: 1px solid #e0d5c7;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    position: sticky;
    top: 20px;
    height: fit-content;
    max-height: calc(100vh - 200px);
}

.detalle-header {
    padding: 20px 24px;
    background: linear-gradient(135deg, #f5f1e8 0%, #ede4d3 100%);
    border-bottom: 1px solid #e0d5c7;
}

.detalle-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 4px 0;
}

.detalle-subtitle {
    font-size: 14px;
    color: #6c757d;
}

.detalle-placeholder {
    padding: 60px 24px;
    text-align: center;
    color: #8b7765;
}

.detalle-placeholder i {
    font-size: 32px;
    margin-bottom: 16px;
    opacity: 0.6;
}

.detalle-placeholder p {
    color: #6c757d;
    font-size: 14px;
    line-height: 1.4;
}

.detalle-content {
    padding: 24px;
    overflow-y: auto;
}

.info-section h4,
.comentarios-section h4 {
    font-size: 16px;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.info-section h4 i,
.comentarios-section h4 i {
    color: #8b7765;
}

.info-grid {
    display: grid;
    gap: 12px;
    margin-bottom: 16px;
}

.info-item {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid #f0f0f0;
}

.info-item label {
    font-weight: 500;
    color: #6c757d;
    font-size: 14px;
}

.info-item span {
    color: #2c3e50;
    font-size: 14px;
    text-align: right;
}

.archivo-section {
    margin-bottom: 24px;
}

.btn-download {
    width: 100%;
}

.comentarios-section {
    margin-bottom: 24px;
}

.comentarios-input {
    border: 1px solid #e0d5c7;
    border-radius: 8px;
    font-size: 14px;
    resize: vertical;
}

.comentarios-input:focus {
    border-color: #8b7765;
    box-shadow: 0 0 0 2px rgba(139, 119, 101, 0.1);
}

.acciones-section {
    display: flex;
    gap: 12px;
}

.acciones-section .btn {
    flex: 1;
}

.empty-entregables {
    text-align: center;
    padding: 60px 20px;
    color: #6c757d;
}

.empty-entregables i {
    font-size: 48px;
    margin-bottom: 16px;
    opacity: 0.5;
    color: #c4a484;
}

.empty-entregables h3 {
    font-size: 18px;
    margin-bottom: 8px;
    color: #2c3e50;
}

/* Responsive */
@@media (max-width: 992px) {
    .revisiones-container {
        grid-template-columns: 1fr;
        gap: 20px;
        height: auto;
    }
    
    .detalle-entregable {
        position: static;
        max-height: none;
    }
}
</style>

<script>
let entregableSeleccionado = null;
let entregablesData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model ?? new List<ServicioComunal.Models.Entrega>()));

function mostrarDetalle(entregaId) {
    // Remover selección anterior
    document.querySelectorAll('.entregable-item').forEach(item => {
        item.classList.remove('selected');
    });
    
    // Agregar selección al item actual
    event.currentTarget.classList.add('selected');
    
    // Encontrar el entregable en los datos
    const entregable = entregablesData.find(e => e.identificacion === entregaId);
    if (!entregable) return;
    
    entregableSeleccionado = entregable;
    
    // Obtener el template y clonarlo
    const template = document.getElementById('detalleTemplate');
    const detalle = document.getElementById('detalleEntregable');
    
    // Copiar el contenido del template
    detalle.innerHTML = template.innerHTML;
    
    // Llenar los datos
    document.getElementById('detalleTitulo').textContent = entregable.nombre;
    
    const estudiante = entregable.grupo.gruposEstudiantes[0]?.estudiante;
    document.getElementById('detalleEstudiante').textContent = 
        estudiante ? `${estudiante.nombre} ${estudiante.apellidos}` : 'No definido';
    document.getElementById('detalleGrupo').textContent = `Grupo ${entregable.grupo.numero}`;
    document.getElementById('detalleArchivo').textContent = entregable.archivoRuta || 'No disponible';
    document.getElementById('detalleFecha').textContent = new Date(entregable.fechaLimite).toLocaleDateString('es-ES');
    
    // Configurar comentarios existentes
    const comentariosTextarea = document.getElementById('comentariosTextarea');
    if (entregable.retroalimentacion) {
        comentariosTextarea.value = entregable.retroalimentacion.replace('CAMBIOS SOLICITADOS: ', '');
    }
    
    // Configurar botones
    document.getElementById('btnDescargar').onclick = () => descargarArchivo(entregaId);
    document.getElementById('btnAprobar').onclick = () => aprobarEntrega(entregaId);
    document.getElementById('btnSolicitarCambios').onclick = () => solicitarCambios(entregaId);
    
    // Deshabilitar botones si ya está revisado
    const esPendiente = !entregable.retroalimentacion;
    document.getElementById('btnAprobar').disabled = !esPendiente;
    document.getElementById('btnSolicitarCambios').disabled = !esPendiente;
    
    if (!esPendiente) {
        document.getElementById('detalleSubtitulo').textContent = 'Entregable ya revisado';
    } else {
        document.getElementById('detalleSubtitulo').textContent = `Grupo ${entregable.grupo.numero} - ${estudiante?.nombre} ${estudiante?.apellidos}`;
    }
}

function descargarArchivo(entregaId) {
    fetch(`@Url.Action("DescargarArchivo", "Tutor")?entregaId=${entregaId}`)
        .then(response => response.json())
        .then(data => {
            if (data.archivo) {
                alert(`Descargando archivo: ${data.archivo}`);
            } else {
                alert('Archivo no disponible');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al descargar el archivo');
        });
}

function aprobarEntrega(entregaId) {
    const comentarios = document.getElementById('comentariosTextarea').value;
    
    if (!comentarios.trim()) {
        if (!confirm('¿Deseas aprobar sin comentarios?')) {
            return;
        }
    }
    
    fetch('@Url.Action("AprobarEntrega", "Tutor")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            entregaId: entregaId,
            comentarios: comentarios || 'Aprobado'
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Entregable aprobado correctamente');
            location.reload();
        } else {
            alert('Error al aprobar el entregable');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al procesar la solicitud');
    });
}

function solicitarCambios(entregaId) {
    const comentarios = document.getElementById('comentariosTextarea').value;
    
    if (!comentarios.trim()) {
        alert('Debes escribir comentarios explicando los cambios requeridos');
        return;
    }
    
    fetch('@Url.Action("SolicitarCambios", "Tutor")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            entregaId: entregaId,
            comentarios: comentarios
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Cambios solicitados correctamente');
            location.reload();
        } else {
            alert('Error al solicitar cambios');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al procesar la solicitud');
    });
}
</script>

<script src="~/js/tutor.js"></script>
