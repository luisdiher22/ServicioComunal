@model List<ServicioComunal.Models.Usuario>
@{
    ViewData["Title"] = "Gestión de Usuarios";
    Layout = "_Layout";
}

<div class="dashboard-content">
    <div class="content-header">
        <h1>Gestión de Usuarios</h1>
        <p>Administrar usuarios del sistema y sus contraseñas</p>
    </div>

    <!-- Estadísticas rápidas -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white stats-card-small">
                <div class="card-body text-center p-3">
                    <i class="fas fa-users fa-lg mb-1"></i>
                    <h6 class="mb-1">@Model.Count</h6>
                    <small>Total Usuarios</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark stats-card-small">
                <div class="card-body text-center p-3">
                    <i class="fas fa-exclamation-triangle fa-lg mb-1"></i>
                    <h6 class="mb-1">@Model.Count(u => u.RequiereCambioContraseña)</h6>
                    <small>Requieren Cambio</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white stats-card-small">
                <div class="card-body text-center p-3">
                    <i class="fas fa-check-circle fa-lg mb-1"></i>
                    <h6 class="mb-1">@Model.Count(u => u.Activo)</h6>
                    <small>Usuarios Activos</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white stats-card-small">
                <div class="card-body text-center p-3">
                    <i class="fas fa-clock fa-lg mb-1"></i>
                    <h6 class="mb-1">@Model.Count(u => u.UltimoAcceso.HasValue && u.UltimoAcceso.Value > DateTime.Now.AddDays(-7))</h6>
                    <small>Activos esta semana</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">Filtrar por rol:</label>
                    <select class="form-select" id="filtroRol" onchange="filtrarUsuarios()">
                        <option value="">Todos los roles</option>
                        <option value="Administrador">Administrador</option>
                        <option value="Profesor">Profesor</option>
                        <option value="Estudiante">Estudiante</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Filtrar por estado:</label>
                    <select class="form-select" id="filtroEstado" onchange="filtrarUsuarios()">
                        <option value="">Todos los estados</option>
                        <option value="activo">Activos</option>
                        <option value="inactivo">Inactivos</option>
                        <option value="requiere-cambio">Requiere cambio contraseña</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Buscar usuario:</label>
                    <input type="text" class="form-control" id="buscarUsuario" placeholder="Nombre de usuario o identificación" onkeyup="filtrarUsuarios()">
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <button type="button" class="btn btn-outline-secondary w-100" onclick="limpiarFiltrosUsuarios()">
                        <i class="fas fa-times"></i> Limpiar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla de usuarios -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-list"></i> Lista de Usuarios
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="tablaUsuarios">
                    <thead class="table-dark">
                        <tr>
                            <th>Identificación</th>
                            <th>Usuario</th>
                            <th>Estado Contraseña</th>
                            <th>Rol</th>
                            <th>Estado</th>
                            <th>Último Acceso</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in Model.OrderBy(u => u.Rol).ThenBy(u => u.NombreUsuario))
                        {
                            <tr class="usuario-row" data-rol="@usuario.Rol" data-estado="@(usuario.Activo ? "activo" : "inactivo")" data-requiere-cambio="@usuario.RequiereCambioContraseña">
                                <td>
                                    <strong>@usuario.Identificacion</strong>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="fas @(usuario.Rol == "Administrador" ? "fa-user-shield" : usuario.Rol == "Tutor" ? "fa-chalkboard-teacher" : "fa-graduation-cap") me-2 text-@(usuario.Rol == "Administrador" ? "danger" : usuario.Rol == "Tutor" ? "warning" : "primary")"></i>
                                        @usuario.NombreUsuario
                                    </div>
                                </td>
                                <td>
                                    <div class="password-status">
                                        @if (usuario.RequiereCambioContraseña)
                                        {
                                            <span class="badge bg-warning text-dark">
                                                <i class="fas fa-exclamation-triangle"></i> Temporal (cédula)
                                            </span>
                                            <br><small class="text-muted">Debe cambiar en próximo login</small>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-check-circle"></i> Personalizada
                                            </span>
                                            <br><small class="text-muted">Usuario definió su contraseña</small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-@(usuario.Rol == "Administrador" ? "danger" : usuario.Rol == "Tutor" ? "warning" : "primary")">
                                        @usuario.Rol
                                    </span>
                                </td>
                                <td>
                                    @if (usuario.Activo)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check"></i> Activo
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            <i class="fas fa-times"></i> Inactivo
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (usuario.UltimoAcceso.HasValue)
                                    {
                                        <span class="text-muted">@usuario.UltimoAcceso.Value.ToString("dd/MM/yyyy HH:mm")</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Nunca</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="abrirModalCambiarContraseña(@usuario.Identificacion, '@usuario.NombreUsuario')" title="Cambiar contraseña">
                                            <i class="fas fa-key"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-warning" onclick="restablecerContraseña(@usuario.Identificacion, '@usuario.NombreUsuario')" title="Restablecer contraseña a cédula">
                                            <i class="fas fa-undo"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para cambiar contraseña -->
<div class="modal fade" id="modalCambiarContraseña" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-key"></i> Cambiar Contraseña
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="formCambiarContraseña">
                    <input type="hidden" id="usuarioId">
                    <div class="mb-3">
                        <label class="form-label">Usuario:</label>
                        <input type="text" class="form-control" id="usuarioNombre" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Nueva Contraseña:</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="nuevaContraseña" placeholder="Mínimo 8 caracteres">
                            <button type="button" class="btn btn-outline-secondary" onclick="togglePasswordField('nuevaContraseña')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="form-text">
                            <small>La contraseña debe tener al menos 8 caracteres y contener al menos un número.</small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Confirmar Contraseña:</label>
                        <input type="password" class="form-control" id="confirmarContraseña" placeholder="Confirma la nueva contraseña">
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="forzarCambio" checked>
                        <label class="form-check-label" for="forzarCambio">
                            Forzar cambio de contraseña en el próximo acceso
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="guardarNuevaContraseña()">
                    <i class="fas fa-save"></i> Cambiar Contraseña
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function togglePasswordField(fieldId) {
            const field = document.getElementById(fieldId);
            const icon = field.nextElementSibling.querySelector('i');
            
            if (field.type === 'password') {
                field.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                field.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        function filtrarUsuarios() {
            const filtroRol = document.getElementById('filtroRol').value;
            const filtroEstado = document.getElementById('filtroEstado').value;
            const busqueda = document.getElementById('buscarUsuario').value.toLowerCase();
            
            const filas = document.querySelectorAll('.usuario-row');
            
            filas.forEach(fila => {
                const rol = fila.getAttribute('data-rol');
                const estado = fila.getAttribute('data-estado');
                const requiereCambio = fila.getAttribute('data-requiere-cambio') === 'True';
                const textoFila = fila.textContent.toLowerCase();
                
                let mostrar = true;
                
                // Filtro por rol
                if (filtroRol && rol !== filtroRol) {
                    mostrar = false;
                }
                
                // Filtro por estado
                if (filtroEstado) {
                    if (filtroEstado === 'activo' && estado !== 'activo') mostrar = false;
                    if (filtroEstado === 'inactivo' && estado !== 'inactivo') mostrar = false;
                    if (filtroEstado === 'requiere-cambio' && !requiereCambio) mostrar = false;
                }
                
                // Filtro por búsqueda
                if (busqueda && !textoFila.includes(busqueda)) {
                    mostrar = false;
                }
                
                fila.style.display = mostrar ? '' : 'none';
            });
        }

        function limpiarFiltrosUsuarios() {
            document.getElementById('filtroRol').value = '';
            document.getElementById('filtroEstado').value = '';
            document.getElementById('buscarUsuario').value = '';
            filtrarUsuarios();
        }

        function guardarNuevaContraseña() {
            const usuarioId = document.getElementById('usuarioId').value;
            const nuevaContraseña = document.getElementById('nuevaContraseña').value;
            const confirmarContraseña = document.getElementById('confirmarContraseña').value;
            const forzarCambio = document.getElementById('forzarCambio').checked;

            // Validaciones
            if (!nuevaContraseña || nuevaContraseña.length < 8) {
                alert('La contraseña debe tener al menos 8 caracteres.');
                return;
            }

            if (!/\d/.test(nuevaContraseña)) {
                alert('La contraseña debe contener al menos un número.');
                return;
            }

            if (nuevaContraseña !== confirmarContraseña) {
                alert('Las contraseñas no coinciden.');
                return;
            }

            // Enviar datos al servidor
            fetch('@Url.Action("CambiarContraseñaUsuario", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    usuarioId: usuarioId,
                    nuevaContraseña: nuevaContraseña,
                    forzarCambio: forzarCambio
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Contraseña cambiada exitosamente.');
                    location.reload();
                } else {
                    alert('Error al cambiar contraseña: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error de conexión: ' + error.message);
            });
        }



        function restablecerContraseña(usuarioId, nombreUsuario) {
            if (confirm(`¿Restablecer la contraseña de ${nombreUsuario} a su cédula?\n\nEsto marcará que debe cambiar la contraseña en el próximo login.`)) {
                fetch('@Url.Action("RestablecerContraseña", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        usuarioId: usuarioId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    } else {
                        alert('Error al restablecer contraseña: ' + data.message);
                    }
                });
            }
        }

        function abrirModalCambiarContraseña(usuarioId, nombreUsuario) {
            document.getElementById('usuarioId').value = usuarioId;
            document.getElementById('usuarioNombre').value = nombreUsuario;
            document.getElementById('nuevaContraseña').value = '';
            document.getElementById('confirmarContraseña').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('modalCambiarContraseña'));
            modal.show();
        }

        function marcarCambioRealizado(usuarioId) {
            if (confirm('¿Marcar que este usuario ya cambió su contraseña?')) {
                fetch('@Url.Action("MarcarCambioContraseñaRealizado", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        usuarioId: usuarioId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        }
    </script>
}

<style>
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .stats-card-small .card-body {
        padding: 0.75rem !important;
    }
    
    .stats-card-small i {
        font-size: 1.25rem;
    }
    
    .stats-card-small h6 {
        font-size: 1.1rem;
        font-weight: bold;
        margin: 0.25rem 0;
    }
    
    .stats-card-small small {
        font-size: 0.75rem;
        opacity: 0.9;
    }
    
    .usuario-row:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }
    
    .badge {
        font-size: 0.75em;
    }
    
    .btn-group {
        gap: 2px;
    }
</style>
