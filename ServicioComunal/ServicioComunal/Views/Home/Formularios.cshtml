@using ServicioComunal.Models
@model List<ServicioComunal.Models.Formulario>

@{
    ViewData["Title"] = "Gestión de Formularios";
}

<div class="container mt-4">
    <h1>
        <i class="fas fa-file-alt"></i>
        Gestión de Formularios
    </h1>
    
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger">
            @ViewBag.Error
        </div>
    }

    <!-- Sección unificada de formularios -->
    <div class="card">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fas fa-file-alt"></i>
                Todos los Formularios Disponibles
            </h5>
            <button class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#modalSubirFormulario">
                <i class="fas fa-plus"></i>
                Subir Formulario
            </button>
        </div>
        <div class="card-body">
            <p class="text-muted mb-3">
                Lista completa de formularios del sistema y formularios adicionales subidos por profesores
            </p>

            <!-- Barra de búsqueda -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" id="buscarFormulario" 
                               placeholder="Buscar por nombre de formulario..." 
                               onkeyup="filtrarFormularios()">
                        <button class="btn btn-outline-secondary" type="button" onclick="limpiarBusqueda()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Tipo</th>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Estado</th>
                            <th>Subido por</th>
                            <th>Fecha</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaFormularios">
                        <!-- Los formularios del sistema se cargarán via JavaScript -->
                        
                        <!-- Formularios adicionales -->
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var formulario in Model)
                            {
                                <tr>
                                    <td>
                                        <span class="badge bg-success">
                                            <i class="fas fa-file-upload"></i>
                                            Formulario Adicional
                                        </span>
                                    </td>
                                    <td><strong>@formulario.Nombre</strong></td>
                                    <td>@formulario.Descripcion</td>
                                    <td>
                                        <span class="badge bg-success">
                                            <i class="fas fa-check-circle"></i>
                                            Disponible
                                        </span>
                                    </td>
                                    <td>
                                        @if (formulario.Profesor != null)
                                        {
                                            @formulario.Profesor.Nombre @formulario.Profesor.Apellidos
                                        }
                                        else
                                        {
                                            <em>No asignado</em>
                                        }
                                    </td>
                                    <td>@formulario.FechaIngreso.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            @if (!string.IsNullOrEmpty(formulario.ArchivoRuta))
                                            {
                                                <a href="@Url.Action("DescargarFormulario", "Home", new { id = formulario.Identificacion })" class="btn btn-outline-primary">
                                                    <i class="fas fa-download"></i>
                                                    Descargar
                                                </a>
                                            }
                                            <button class="btn btn-outline-warning btn-editar-formulario" 
                                                    data-id="@formulario.Identificacion"
                                                    data-nombre="@formulario.Nombre"
                                                    data-descripcion="@formulario.Descripcion">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" onclick="eliminarFormulario(@formulario.Identificacion)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                
                @if ((Model == null || !Model.Any()))
                {
                    <div class="text-center py-4" id="sinFormularios" style="display: none;">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No hay formularios disponibles.</p>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalSubirFormulario">
                            <i class="fas fa-plus"></i>
                            Subir Primer Formulario
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal para subir formulario -->
<div class="modal fade" id="modalSubirFormulario" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-upload"></i>
                    Subir Nuevo Formulario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="formSubirFormulario" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="nombreFormulario" class="form-label">Nombre <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="nombreFormulario" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="descripcionFormulario" class="form-label">Descripción <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="descripcionFormulario" rows="3" required></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="archivoFormulario" class="form-label">Archivo <span class="text-danger">*</span></label>
                        <input type="file" class="form-control" id="archivoFormulario" 
                               accept=".pdf,.doc,.docx,.txt" required>
                        <div class="form-text">
                            Formatos permitidos: PDF, DOC, DOCX, TXT. Máximo 10MB.
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="submit" form="formSubirFormulario" class="btn btn-primary">
                    <i class="fas fa-upload"></i>
                    Subir Formulario
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para editar formulario -->
<div class="modal fade" id="modalEditarFormulario" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit"></i>
                    Editar Formulario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="formEditarFormulario">
                    <input type="hidden" id="editarFormularioId">
                    
                    <div class="mb-3">
                        <label for="editarNombreFormulario" class="form-label">Nombre <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="editarNombreFormulario" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="editarDescripcionFormulario" class="form-label">Descripción <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="editarDescripcionFormulario" rows="3" required></textarea>
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <small>Solo se puede editar el nombre y la descripción. El archivo no se puede modificar para mantener la integridad de las entregas existentes.</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="submit" form="formEditarFormulario" class="btn btn-warning">
                    <i class="fas fa-save"></i>
                    Guardar Cambios
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
    }
    
    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }
    
    .btn-group-sm .btn {
        margin-right: 0.25rem;
    }
    
    .btn-group-sm .btn:last-child {
        margin-right: 0;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    cargarAnexos();
    
    // Configurar formulario de subir
    document.getElementById('formSubirFormulario').addEventListener('submit', subirFormulario);
    
    // Configurar formulario de editar
    document.getElementById('formEditarFormulario').addEventListener('submit', editarFormulario);
    
    // Configurar botones de editar con event delegation
    document.addEventListener('click', function(e) {
        if (e.target.closest('.btn-editar-formulario')) {
            const btn = e.target.closest('.btn-editar-formulario');
            const id = btn.getAttribute('data-id');
            const nombre = btn.getAttribute('data-nombre');
            const descripcion = btn.getAttribute('data-descripcion');
            abrirModalEditar(id, nombre, descripcion);
        }
    });
});

async function cargarAnexos() {
    try {
        const response = await fetch('/Home/ObtenerAnexosDisponibles');
        const data = await response.json();
        
        if (data.success) {
            mostrarAnexos(data.anexos);
        } else {
            console.error('Error al cargar formularios:', data.message);
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

function mostrarAnexos(anexos) {
    const tbody = document.getElementById('tablaFormularios');
    
    // Preparar filas para formularios del sistema
    let formulariosHtml = '';
    
    anexos.forEach(anexo => {
        const disponibleClass = anexo.existe ? 'bg-primary' : 'bg-secondary';
        const estadoClass = anexo.existe ? 'bg-success' : 'bg-danger';
        const estadoTexto = anexo.existe ? 'Disponible' : 'No encontrado';
        const estadoIcono = anexo.existe ? 'fa-check-circle' : 'fa-times-circle';
        const btnClass = anexo.existe ? 'btn-primary' : 'btn-secondary';
        const btnDisabled = anexo.existe ? '' : 'disabled';
        
        formulariosHtml += `
            <tr>
                <td>
                    <span class="badge ${disponibleClass}">
                        <i class="fas fa-file-pdf"></i>
                        Formulario del Sistema
                    </span>
                </td>
                <td><strong>${anexo.nombre}</strong></td>
                <td>Formulario oficial del servicio comunal</td>
                <td>
                    <span class="badge ${estadoClass}">
                        <i class="fas ${estadoIcono}"></i>
                        ${estadoTexto}
                    </span>
                </td>
                <td><em>Sistema</em></td>
                <td>-</td>
                <td>
                    <a href="${anexo.rutaDescarga}" 
                       class="btn btn-sm ${btnClass}" 
                       ${btnDisabled}
                       ${anexo.existe ? 'target="_blank"' : ''}>
                        <i class="fas fa-download"></i>
                        ${anexo.existe ? 'Descargar' : 'No disponible'}
                    </a>
                </td>
            </tr>
        `;
    });
    
    // Insertar formularios del sistema al inicio de la tabla
    if (tbody.children.length > 0) {
        tbody.insertAdjacentHTML('afterbegin', formulariosHtml);
    } else {
        tbody.innerHTML = formulariosHtml;
        // Ocultar mensaje de sin formularios si hay formularios del sistema
        const sinFormularios = document.getElementById('sinFormularios');
        if (sinFormularios) {
            sinFormularios.style.display = 'none';
        }
    }
}

async function subirFormulario(e) {
    e.preventDefault();
    
    const archivo = document.getElementById('archivoFormulario').files[0];
    
    // Validar tipo de archivo
    if (archivo) {
        const tiposPermitidos = ['.pdf', '.doc', '.docx', '.txt'];
        const extension = archivo.name.toLowerCase().substring(archivo.name.lastIndexOf('.'));
        
        if (!tiposPermitidos.includes(extension)) {
            mostrarError('Error: Solo se permiten archivos PDF, DOC, DOCX o TXT');
            return;
        }
    }
    
    const formData = new FormData();
    formData.append('nombre', document.getElementById('nombreFormulario').value);
    formData.append('descripcion', document.getElementById('descripcionFormulario').value);
    formData.append('archivo', archivo);
    
    try {
        const response = await fetch('/Home/CrearFormularioConArchivo', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('modalSubirFormulario')).hide();
            
            Swal.fire({
                title: '¡Éxito!',
                text: 'Formulario subido exitosamente',
                icon: 'success',
                confirmButtonText: 'Aceptar'
            }).then(() => {
                location.reload(); // Recargar para mostrar el nuevo formulario
            });
        } else {
            mostrarError('Error: ' + data.message);
        }
    } catch (error) {
        alert('Error al subir formulario: ' + error.message);
    }
}

async function eliminarFormulario(formularioId) {
    const result = await Swal.fire({
        title: '¿Estás seguro?',
        text: '¿Deseas eliminar este formulario? Esta acción no se puede deshacer.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    });

    if (!result.isConfirmed) {
        return;
    }
    
    try {
        const response = await fetch('/Home/EliminarFormulario/' + formularioId, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                title: '¡Eliminado!',
                text: 'Formulario eliminado exitosamente',
                icon: 'success',
                confirmButtonText: 'Aceptar'
            }).then(() => {
                location.reload();
            });
        } else {
            mostrarError('Error: ' + data.message);
        }
    } catch (error) {
        mostrarError('Error al eliminar formulario: ' + error.message);
    }
}

function abrirModalEditar(id, nombre, descripcion) {
    document.getElementById('editarFormularioId').value = id;
    document.getElementById('editarNombreFormulario').value = nombre;
    document.getElementById('editarDescripcionFormulario').value = descripcion;
    const modal = new bootstrap.Modal(document.getElementById('modalEditarFormulario'));
    modal.show();
}

async function editarFormulario(e) {
    e.preventDefault();
    
    const formularioId = document.getElementById('editarFormularioId').value;
    const nombre = document.getElementById('editarNombreFormulario').value.trim();
    const descripcion = document.getElementById('editarDescripcionFormulario').value.trim();
    
    if (!nombre) {
        mostrarError('El nombre del formulario es requerido');
        return;
    }
    
    try {
        const formData = new FormData();
        formData.append('identificacion', formularioId);
        formData.append('nombre', nombre);
        formData.append('descripcion', descripcion);
        
        const response = await fetch('/Home/EditarFormulario', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('modalEditarFormulario'));
            modal.hide();
            
            Swal.fire({
                title: '¡Éxito!',
                text: 'Formulario actualizado exitosamente',
                icon: 'success',
                confirmButtonText: 'Aceptar'
            }).then(() => {
                location.reload();
            });
        } else {
            mostrarError('Error: ' + data.message);
        }
    } catch (error) {
        mostrarError('Error al editar formulario: ' + error.message);
    }
}

function filtrarFormularios() {
    const searchTerm = document.getElementById('buscarFormulario').value.toLowerCase();
    const rows = document.querySelectorAll('#tablaFormularios tr');
    
    rows.forEach(row => {
        // Verificar que la fila tenga suficientes celdas (evitar problemas con filas vacías)
        if (row.cells && row.cells.length > 1) {
            const nombre = row.cells[1].textContent.toLowerCase(); // Columna de Nombre
            if (nombre.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    });
}

function limpiarBusqueda() {
    document.getElementById('buscarFormulario').value = '';
    filtrarFormularios();
}
</script>
