@using Microsoft.AspNetCore.Http
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <title>@ViewData["Title"] - Servicio Comunal</title>
    
    <!-- Google Fonts - Fira Sans -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    
    <!-- Bootstrap y Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- SweetAlert2 -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    
    <!-- Estilos personalizados -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    @if (ViewData["IsLogin"] as bool? == true)
    {
        <main role="main">
            @RenderBody()
        </main>
    }
    else
    {
        <!-- Botón hamburguesa para móvil -->
        <button class="mobile-menu-toggle" id="mobileMenuToggle" aria-label="Abrir menú de navegación">
            <div class="hamburger-icon">
                <span></span>
            </div>
        </button>

        <!-- Overlay para cerrar el menú móvil -->
        <div class="mobile-menu-overlay" id="mobileMenuOverlay"></div>

        <!-- Sidebar móvil -->
        <aside class="mobile-sidebar" id="mobileSidebar">
            <div class="mobile-sidebar-header">
                <div class="logo-placeholder"></div>
                <div class="user-info">
                    <h5>@(Context.Session.GetString("UsuarioNombreCompleto") ?? "Usuario")</h5>
                    <small>@(Context.Session.GetString("UsuarioRol") ?? "Administrador")</small>
                </div>
                <div class="mobile-notifications-btn" onclick="toggleNotifications()">
                    <i class="fas fa-bell"></i>
                    <span class="mobile-notification-badge" id="mobileNotificationBadge" style="display: none;">0</span>
                </div>
            </div>
            <nav class="mobile-sidebar-nav">
                @if (Context.Session.GetString("UsuarioRol") == "Tutor")
                {
                    <a href="@Url.Action("Dashboard", "Tutor")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                        <i class="fas fa-home"></i>
                        <span>Inicio</span>
                    </a>
                    <a href="@Url.Action("MisGrupos", "Tutor")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "MisGrupos" ? "active" : "")">
                        <i class="fas fa-users"></i>
                        <span>Mis Grupos</span>
                    </a>
                    <a href="@Url.Action("Revisiones", "Tutor")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Revisiones" ? "active" : "")">
                        <i class="fas fa-clipboard-check"></i>
                        <span>Revisiones</span>
                    </a>
                    <a href="@Url.Action("Progreso", "Tutor")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Progreso" ? "active" : "")">
                        <i class="fas fa-chart-line"></i>
                        <span>Progreso</span>
                    </a>
                    <a href="@Url.Action("MiPerfil", "Tutor")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "MiPerfil" ? "active" : "")">
                        <i class="fas fa-user"></i>
                        <span>Mi Perfil</span>
                    </a>
                }
                else if (Context.Session.GetString("UsuarioRol") == "Estudiante")
                {
                    <a href="@Url.Action("Dashboard", "Estudiante")" class="mobile-nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" || ViewContext.RouteData.Values["controller"]?.ToString() == "Anexo") && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                        <i class="fas fa-home"></i>
                        <span>Mi Dashboard</span>
                    </a>
                    <a href="@Url.Action("MiGrupo", "Estudiante")" class="mobile-nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" || ViewContext.RouteData.Values["controller"]?.ToString() == "Anexo") && ViewContext.RouteData.Values["action"]?.ToString() == "MiGrupo" ? "active" : "")">
                        <i class="fas fa-users"></i>
                        <span>Mi Grupo</span>
                    </a>
                    <a href="@Url.Action("Entregas", "Estudiante")" class="mobile-nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante") && (ViewContext.RouteData.Values["action"]?.ToString() == "Entregas" || ViewContext.RouteData.Values["action"]?.ToString() == "DetalleEntrega") ? "active" : "")">
                        <i class="fas fa-file-alt"></i>
                        <span>Mis Entregas</span>
                    </a>
                    <a href="@Url.Action("MisSolicitudes", "Estudiante")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" && ViewContext.RouteData.Values["action"]?.ToString() == "MisSolicitudes" ? "active" : "")">
                        <i class="fas fa-paper-plane"></i>
                        <span>Mis Solicitudes</span>
                    </a>
                    <a href="@Url.Action("MiPerfil", "Estudiante")" class="mobile-nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" && ViewContext.RouteData.Values["action"]?.ToString() == "MiPerfil" ? "active" : "")">
                        <i class="fas fa-user"></i>
                        <span>Mi Perfil</span>
                    </a>
                }
                else
                {
                    <a href="@Url.Action("Dashboard", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                        <i class="fas fa-home"></i>
                        <span>Inicio</span>
                    </a>
                    <a href="@Url.Action("Estudiantes", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Estudiantes" ? "active" : "")">
                        <i class="fas fa-graduation-cap"></i>
                        <span>Estudiantes</span>
                    </a>
                    <a href="@Url.Action("GestionGrupos", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "GestionGrupos" ? "active" : "")">
                        <i class="fas fa-users"></i>
                        <span>Gestión Grupos</span>
                    </a>
                    <a href="@Url.Action("AdministrarDocentes", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "AdministrarDocentes" ? "active" : "")">
                        <i class="fas fa-chalkboard-teacher"></i>
                        <span>Administrar Docentes</span>
                    </a>
                    <a href="@Url.Action("Usuarios", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Usuarios" ? "active" : "")">
                        <i class="fas fa-users-cog"></i>
                        <span>Usuarios</span>
                    </a>
                    <a href="@Url.Action("Formularios", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Formularios" ? "active" : "")">
                        <i class="fas fa-file-alt"></i>
                        <span>Formularios</span>
                    </a>
                    <a href="@Url.Action("Entregas", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Entregas" ? "active" : "")">
                        <i class="fas fa-tasks"></i>
                        <span>Entregas</span>
                    </a>
                    <a href="@Url.Action("Configuracion", "Home")" class="mobile-nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Configuracion" ? "active" : "")">
                        <i class="fas fa-cog"></i>
                        <span>Configuración</span>
                    </a>
                }
            </nav>
            <div class="mobile-sidebar-footer">
                <a href="@Url.Action("Logout", "Auth")" class="mobile-logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Cerrar Sesión</span>
                </a>
            </div>
        </aside>

        <!-- Header -->
        <header class="@((Context.Session.GetString("UsuarioRol") == "Tutor") ? "dashboard-header tutor-theme" : "dashboard-header")">
            <div class="header-content">
                <div class="header-left">
                    <img src="~/images/logo-liceo.svg" alt="Logo" class="header-logo">
                    <span class="header-title">Servicio Comunal</span>
                    <span class="header-subtitle">@(Context.Session.GetString("UsuarioNombreCompleto") ?? "Usuario")</span>
                </div>
                <div class="header-right">
                    <div class="header-user">
                        <i class="fas fa-user-circle"></i>
                        <span>@(Context.Session.GetString("UsuarioRol") ?? "Administrador")</span>
                    </div>
                    <div class="header-notifications" onclick="toggleNotifications()">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
                    </div>
                </div>
            </div>
        </header>

        <div class="dashboard-container">
            <!-- Sidebar -->
            <aside class="@((Context.Session.GetString("UsuarioRol") == "Tutor") ? "sidebar tutor-theme" : "sidebar")">
                <nav class="sidebar-nav">
                    @if (Context.Session.GetString("UsuarioRol") == "Tutor")
                    {
                        <a href="@Url.Action("Dashboard", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Inicio</span>
                        </a>
                        <a href="@Url.Action("MisGrupos", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "MisGrupos" ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>Mis Grupos</span>
                        </a>
                        <a href="@Url.Action("Revisiones", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Revisiones" ? "active" : "")">
                            <i class="fas fa-clipboard-check"></i>
                            <span>Revisiones</span>
                        </a>
                        <a href="@Url.Action("Progreso", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Progreso" ? "active" : "")">
                            <i class="fas fa-chart-line"></i>
                            <span>Progreso</span>
                        </a>
                        <a href="@Url.Action("MiPerfil", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "MiPerfil" ? "active" : "")">
                            <i class="fas fa-user"></i>
                            <span>Mi Perfil</span>
                        </a>
                    }
                    else if (Context.Session.GetString("UsuarioRol") == "Estudiante")
                    {
                        <a href="@Url.Action("Dashboard", "Estudiante")" class="nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" || ViewContext.RouteData.Values["controller"]?.ToString() == "Anexo") && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Mi Dashboard</span>
                        </a>
                        <a href="@Url.Action("MiGrupo", "Estudiante")" class="nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" || ViewContext.RouteData.Values["controller"]?.ToString() == "Anexo") && ViewContext.RouteData.Values["action"]?.ToString() == "MiGrupo" ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>Mi Grupo</span>
                        </a>
                        <a href="@Url.Action("Entregas", "Estudiante")" class="nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante") && (ViewContext.RouteData.Values["action"]?.ToString() == "Entregas" || ViewContext.RouteData.Values["action"]?.ToString() == "DetalleEntrega") ? "active" : "")">
                            <i class="fas fa-file-alt"></i>
                            <span>Mis Entregas</span>
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("Dashboard", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Inicio</span>
                        </a>
                        <a href="@Url.Action("Estudiantes", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Estudiantes" ? "active" : "")">
                            <i class="fas fa-graduation-cap"></i>
                            <span>Estudiantes</span>
                        </a>
                        <a href="@Url.Action("GestionGrupos", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "GestionGrupos" ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>Gestión Grupos</span>
                        </a>
                        <a href="@Url.Action("AdministrarDocentes", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "AdministrarDocentes" ? "active" : "")">
                            <i class="fas fa-chalkboard-teacher"></i>
                            <span>Administrar Docentes</span>
                        </a>
                        <a href="@Url.Action("Usuarios", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Usuarios" ? "active" : "")">
                            <i class="fas fa-users-cog"></i>
                            <span>Usuarios</span>
                        </a>
                        <a href="@Url.Action("Formularios", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Formularios" ? "active" : "")">
                            <i class="fas fa-file-alt"></i>
                            <span>Formularios</span>
                        </a>
                        <a href="@Url.Action("Entregas", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Entregas" ? "active" : "")">
                            <i class="fas fa-tasks"></i>
                            <span>Entregas</span>
                        </a>
                        <a href="@Url.Action("Configuracion", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Configuracion" ? "active" : "")">
                            <i class="fas fa-cog"></i>
                            <span>Configuración</span>
                        </a>
                    }
                </nav>
                <div class="sidebar-footer">
                    <a href="@Url.Action("Logout", "Auth")" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Cerrar Sesión</span>
                    </a>
                </div>
            </aside>

            <!-- Main Content -->
            <main class="main-content">
                @RenderBody()
            </main>
        </div>
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- Mobile optimizations -->
    <script>
        // Mobile optimizations for all user roles
        (function() {
            // Detect user role for specific optimizations
            var userRole = '@(Context.Session.GetString("UsuarioRol") ?? "")';
            var isLogin = @((ViewData["IsLogin"] as bool? == true).ToString().ToLower());
            
            // Prevent zoom on input focus for iOS
            if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
                document.addEventListener('DOMContentLoaded', function() {
                    var inputs = document.querySelectorAll('input[type="text"], input[type="password"], input[type="email"], input[type="number"], textarea, select');
                    inputs.forEach(function(input) {
                        input.style.fontSize = '16px';
                        input.style.webkitAppearance = 'none';
                        input.style.appearance = 'none';
                    });
                });
            }
            
            // Improve touch experience
            document.addEventListener('touchstart', function() {}, {passive: true});
            
            // Handle orientation change with role-specific adjustments
            window.addEventListener('orientationchange', function() {
                setTimeout(function() {
                    window.scrollTo(0, 0);
                    
                    // Role-specific orientation handling
                    if (userRole === 'Estudiante') {
                        // Recalculate estudiante layout
                        var sidebar = document.querySelector('.estudiante-theme .sidebar');
                        if (sidebar && window.innerWidth <= 768) {
                            sidebar.style.order = '1';
                        }
                    }
                    
                    // Force redraw for better mobile experience
                    document.body.style.display = 'none';
                    document.body.offsetHeight; // Trigger reflow
                    document.body.style.display = '';
                }, 100);
            });
            
            // Improve scrolling performance for all layouts
            document.addEventListener('touchmove', function(e) {
                if (e.target.closest('.table-responsive, .sidebar-nav, .modal-body, .estudiante-theme .nav')) {
                    return;
                }
            }, {passive: true});
            
            // Auto-hide address bar on mobile (all roles)
            if (window.innerHeight < window.innerWidth && window.innerHeight < 500) {
                setTimeout(function() {
                    window.scrollTo(0, 1);
                }, 0);
            }
            
            // Role-specific mobile optimizations
            document.addEventListener('DOMContentLoaded', function() {
                var isMobile = window.innerWidth <= 768;
                
                if (isMobile && !isLogin) {
                    // Administrador optimizations
                    if (userRole === 'Administrador') {
                        optimizeAdminMobile();
                    }
                    
                    // Tutor optimizations  
                    if (userRole === 'Tutor') {
                        optimizeTutorMobile();
                    }
                    
                    // Estudiante optimizations
                    if (userRole === 'Estudiante') {
                        optimizeEstudianteMobile();
                    }
                }
                
                // Generic mobile optimizations for all roles
                if (isMobile) {
                    optimizeGenericMobile();
                }
            });
            
            // Administrador mobile optimizations
            function optimizeAdminMobile() {
                // Add swipe gestures for better navigation
                var mainContent = document.querySelector('.main-content');
                if (mainContent) {
                    addSwipeGestures(mainContent);
                }
                
                // Optimize tables for admin
                optimizeTablesForMobile();
            }
            
            // Tutor mobile optimizations
            function optimizeTutorMobile() {
                // Add tutor-specific mobile enhancements
                var tutorCards = document.querySelectorAll('.tutor-theme .dashboard-card');
                tutorCards.forEach(function(card) {
                    card.addEventListener('touchstart', function() {
                        this.style.transform = 'scale(0.98)';
                    }, {passive: true});
                    
                    card.addEventListener('touchend', function() {
                        this.style.transform = '';
                    }, {passive: true});
                });
            }
            
            // Estudiante mobile optimizations
            function optimizeEstudianteMobile() {
                // Optimize estudiante sidebar navigation
                var nav = document.querySelector('.estudiante-theme .nav');
                if (nav && window.innerWidth <= 768) {
                    // Add scroll indicators
                    addScrollIndicators(nav);
                    
                    // Improve touch scrolling
                    nav.style.webkitOverflowScrolling = 'touch';
                    nav.style.scrollBehavior = 'smooth';
                }
                
                // Add pull-to-refresh feel (visual feedback only)
                var mainContent = document.querySelector('.estudiante-theme .main-content');
                if (mainContent) {
                    addPullToRefreshFeedback(mainContent);
                }
            }
            
            // Generic mobile optimizations for all roles
            function optimizeGenericMobile() {
                // Improve modal behavior on mobile
                var modals = document.querySelectorAll('.modal');
                modals.forEach(function(modal) {
                    modal.addEventListener('shown.bs.modal', function() {
                        // Prevent body scroll when modal is open
                        document.body.style.overflow = 'hidden';
                        document.body.style.position = 'fixed';
                        document.body.style.width = '100%';
                    });
                    
                    modal.addEventListener('hidden.bs.modal', function() {
                        // Restore body scroll when modal is closed
                        document.body.style.overflow = '';
                        document.body.style.position = '';
                        document.body.style.width = '';
                    });
                });
                
                // Add loading states for better perceived performance
                var buttons = document.querySelectorAll('.btn[type="submit"]');
                buttons.forEach(function(btn) {
                    btn.addEventListener('click', function() {
                        if (this.form && this.form.checkValidity()) {
                            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
                            this.disabled = true;
                        }
                    });
                });
            }
            
            // Helper function: Add swipe gestures
            function addSwipeGestures(element) {
                var startX = 0, startY = 0;
                
                element.addEventListener('touchstart', function(e) {
                    startX = e.touches[0].clientX;
                    startY = e.touches[0].clientY;
                }, {passive: true});
                
                element.addEventListener('touchend', function(e) {
                    if (!startX || !startY) return;
                    
                    var endX = e.changedTouches[0].clientX;
                    var endY = e.changedTouches[0].clientY;
                    
                    var diffX = startX - endX;
                    var diffY = startY - endY;
                    
                    // Horizontal swipe detected
                    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
                        // Can add navigation logic here
                        console.log('Swipe detected:', diffX > 0 ? 'left' : 'right');
                    }
                    
                    startX = 0;
                    startY = 0;
                }, {passive: true});
            }
            
            // Helper function: Add scroll indicators
            function addScrollIndicators(nav) {
                var indicator = document.createElement('div');
                indicator.className = 'scroll-indicator';
                indicator.innerHTML = '← Desliza para más opciones →';
                indicator.style.cssText = `
                    position: absolute;
                    bottom: -20px;
                    left: 50%;
                    transform: translateX(-50%);
                    font-size: 10px;
                    color: #6c757d;
                    opacity: 0.7;
                    pointer-events: none;
                `;
                
                nav.parentElement.style.position = 'relative';
                nav.parentElement.appendChild(indicator);
                
                // Hide indicator when scrolled to end
                nav.addEventListener('scroll', function() {
                    var isAtEnd = this.scrollLeft >= (this.scrollWidth - this.clientWidth - 10);
                    indicator.style.opacity = isAtEnd ? '0' : '0.7';
                });
            }
            
            // Helper function: Add pull-to-refresh feedback
            function addPullToRefreshFeedback(mainContent) {
                var startY = 0;
                
                mainContent.addEventListener('touchstart', function(e) {
                    startY = e.touches[0].clientY;
                }, {passive: true});
                
                mainContent.addEventListener('touchmove', function(e) {
                    var currentY = e.touches[0].clientY;
                    var diff = currentY - startY;
                    
                    // If pulling down at the top
                    if (diff > 0 && this.scrollTop === 0) {
                        var opacity = Math.min(diff / 100, 0.3);
                        this.style.background = `linear-gradient(135deg, rgba(108, 141, 71, ${opacity}) 0%, rgba(90, 122, 58, ${opacity * 0.8}) 100%)`;
                    }
                }, {passive: true});
                
                mainContent.addEventListener('touchend', function() {
                    this.style.background = '';
                }, {passive: true});
            }
            
            // Helper function: Optimize tables for mobile
            function optimizeTablesForMobile() {
                var tables = document.querySelectorAll('.table-responsive');
                tables.forEach(function(tableContainer) {
                    // Add touch scroll momentum
                    tableContainer.style.webkitOverflowScrolling = 'touch';
                    
                    // Add shadow gradient for scroll indication
                    var leftShadow = document.createElement('div');
                    leftShadow.style.cssText = `
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 10px;
                        height: 100%;
                        background: linear-gradient(to right, rgba(0,0,0,0.1), transparent);
                        pointer-events: none;
                        opacity: 0;
                        z-index: 10;
                    `;
                    
                    var rightShadow = document.createElement('div');
                    rightShadow.style.cssText = `
                        position: absolute;
                        top: 0;
                        right: 0;
                        width: 10px;
                        height: 100%;
                        background: linear-gradient(to left, rgba(0,0,0,0.1), transparent);
                        pointer-events: none;
                        opacity: 1;
                        z-index: 10;
                    `;
                    
                    tableContainer.style.position = 'relative';
                    tableContainer.appendChild(leftShadow);
                    tableContainer.appendChild(rightShadow);
                    
                    // Update shadows on scroll
                    tableContainer.addEventListener('scroll', function() {
                        var scrollLeft = this.scrollLeft;
                        var maxScroll = this.scrollWidth - this.clientWidth;
                        
                        leftShadow.style.opacity = scrollLeft > 0 ? '1' : '0';
                        rightShadow.style.opacity = scrollLeft < maxScroll - 5 ? '1' : '0';
                    });
                });
            }
        })();
    </script>
    
    <!-- Fix para modal backdrop que queda visible -->
    <script>
        // Limpiar modal backdrops cuando se cierran modales
        document.addEventListener('hidden.bs.modal', function (event) {
            // Eliminar cualquier backdrop que quede
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            
            // Restaurar scroll del body
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
        
        // Asegurar que los modales se abran correctamente
        document.addEventListener('show.bs.modal', function (event) {
            // Cerrar cualquier modal abierto antes de abrir uno nuevo
            const openModals = document.querySelectorAll('.modal.show');
            openModals.forEach(modal => {
                const modalInstance = bootstrap.Modal.getInstance(modal);
                if (modalInstance) {
                    modalInstance.hide();
                }
            });
        });
    </script>
    
    <!-- Modal de Notificaciones -->
    <div class="modal fade" id="notificacionesModal" tabindex="-1" aria-labelledby="notificacionesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificacionesModalLabel">
                        <i class="fas fa-bell"></i> Notificaciones
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span id="totalNotificaciones">0 notificaciones</span>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="marcarTodasComoLeidas()">
                            <i class="fas fa-check"></i> Marcar todas como leídas
                        </button>
                    </div>
                    <div id="listaNotificaciones">
                        <div class="text-center p-4">
                            <i class="fas fa-spinner fa-spin fa-2x"></i>
                            <p class="mt-2">Cargando notificaciones...</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variables globales para notificaciones
        let notificacionesModal;
        let conteoActual = 0;

        // Variables globales para menú móvil
        let mobileMenuToggle;
        let mobileSidebar;
        let mobileMenuOverlay;

        // Inicializar cuando se carga la página
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar menú móvil
            initializeMobileMenu();
            
            // Inicializar notificaciones si no están deshabilitadas
            @if (ViewData["DisableNotifications"] as bool? != true)
            {
                <text>
                // Intentar inicializar modal
                const modalElement = document.getElementById('notificacionesModal');
                if (modalElement) {
                    notificacionesModal = new bootstrap.Modal(modalElement);
                }
                
                // Actualizar conteo de notificaciones
                actualizarConteoNotificaciones();
                
                // Actualizar cada 6 minutos
                setInterval(actualizarConteoNotificaciones, 360000);
                </text>
            }
        });

        // Funciones para el menú móvil
        function initializeMobileMenu() {
            mobileMenuToggle = document.getElementById('mobileMenuToggle');
            mobileSidebar = document.getElementById('mobileSidebar');
            mobileMenuOverlay = document.getElementById('mobileMenuOverlay');

            if (mobileMenuToggle && mobileSidebar && mobileMenuOverlay) {
                // Event listeners
                mobileMenuToggle.addEventListener('click', toggleMobileMenu);
                mobileMenuOverlay.addEventListener('click', closeMobileMenu);
                
                // Cerrar menú al hacer click en un link
                const mobileNavItems = document.querySelectorAll('.mobile-nav-item');
                mobileNavItems.forEach(item => {
                    item.addEventListener('click', closeMobileMenu);
                });

                // Cerrar menú con tecla Escape
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape' && mobileSidebar.classList.contains('active')) {
                        closeMobileMenu();
                    }
                });

                // Manejar cambios de orientación
                window.addEventListener('orientationchange', function() {
                    setTimeout(closeMobileMenu, 100);
                });

                // Cerrar menú cuando se redimensiona la ventana a desktop
                window.addEventListener('resize', function() {
                    if (window.innerWidth > 991) {
                        closeMobileMenu();
                    }
                });

                // Prevenir scroll del body cuando el menú está abierto
                function preventBodyScroll(prevent) {
                    if (prevent) {
                        document.body.style.overflow = 'hidden';
                        document.body.style.position = 'fixed';
                        document.body.style.width = '100%';
                    } else {
                        document.body.style.overflow = '';
                        document.body.style.position = '';
                        document.body.style.width = '';
                    }
                }

                // Agregar función de prevención de scroll
                mobileSidebar.addEventListener('transitionstart', function() {
                    if (this.classList.contains('active')) {
                        preventBodyScroll(true);
                    }
                });

                mobileSidebar.addEventListener('transitionend', function() {
                    if (!this.classList.contains('active')) {
                        preventBodyScroll(false);
                    }
                });
            }
        }

        function toggleMobileMenu() {
            const isActive = mobileSidebar.classList.contains('active');
            
            if (isActive) {
                closeMobileMenu();
            } else {
                openMobileMenu();
            }
        }

        function openMobileMenu() {
            mobileMenuToggle.classList.add('active');
            mobileSidebar.classList.add('active');
            mobileMenuOverlay.classList.add('active');
            mobileMenuOverlay.style.display = 'block';
            
            // Accesibilidad
            mobileMenuToggle.setAttribute('aria-expanded', 'true');
            mobileSidebar.setAttribute('aria-hidden', 'false');
            
            // Focus en el primer elemento del menú
            setTimeout(() => {
                const firstNavItem = mobileSidebar.querySelector('.mobile-nav-item');
                if (firstNavItem) {
                    firstNavItem.focus();
                }
            }, 300);
        }

        function closeMobileMenu() {
            mobileMenuToggle.classList.remove('active');
            mobileSidebar.classList.remove('active');
            mobileMenuOverlay.classList.remove('active');
            
            // Accesibilidad
            mobileMenuToggle.setAttribute('aria-expanded', 'false');
            mobileSidebar.setAttribute('aria-hidden', 'true');
            
            setTimeout(() => {
                mobileMenuOverlay.style.display = 'none';
            }, 300);
        }

        // Función para mejorar la navegación con teclado en móvil
        function handleMobileKeyNavigation(e) {
            if (window.innerWidth <= 991 && mobileSidebar.classList.contains('active')) {
                const navItems = Array.from(document.querySelectorAll('.mobile-nav-item'));
                const currentIndex = navItems.indexOf(document.activeElement);
                
                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        const nextIndex = (currentIndex + 1) % navItems.length;
                        navItems[nextIndex].focus();
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        const prevIndex = currentIndex > 0 ? currentIndex - 1 : navItems.length - 1;
                        navItems[prevIndex].focus();
                        break;
                    case 'Home':
                        e.preventDefault();
                        navItems[0].focus();
                        break;
                    case 'End':
                        e.preventDefault();
                        navItems[navItems.length - 1].focus();
                        break;
                }
            }
        }

        document.addEventListener('keydown', handleMobileKeyNavigation);

        // Mejoras adicionales para dispositivos touch
        function initializeTouchEnhancements() {
            // Detectar si es un dispositivo touch
            const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
            
            if (isTouchDevice) {
                document.body.classList.add('touch-device');
                
                // Mejorar feedback visual para botones
                const buttons = document.querySelectorAll('.btn, .nav-item, .mobile-nav-item, .dashboard-card, .card');
                buttons.forEach(button => {
                    button.addEventListener('touchstart', function() {
                        this.classList.add('touch-active');
                    }, { passive: true });
                    
                    button.addEventListener('touchend', function() {
                        setTimeout(() => {
                            this.classList.remove('touch-active');
                        }, 150);
                    }, { passive: true });
                    
                    button.addEventListener('touchcancel', function() {
                        this.classList.remove('touch-active');
                    }, { passive: true });
                });
                
                // Mejorar scroll momentum en elementos específicos
                const scrollElements = document.querySelectorAll('.table-responsive, .mobile-sidebar, .modal-body');
                scrollElements.forEach(element => {
                    element.style.webkitOverflowScrolling = 'touch';
                    element.style.scrollBehavior = 'smooth';
                });
                
                // Prevenir zoom en formularios para iOS
                if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
                    const viewportMeta = document.querySelector('meta[name="viewport"]');
                    if (viewportMeta) {
                        viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
                    }
                    
                    // Ajustar font-size de inputs para prevenir zoom
                    const inputs = document.querySelectorAll('input, textarea, select');
                    inputs.forEach(input => {
                        if (window.getComputedStyle(input).fontSize < '16px') {
                            input.style.fontSize = '16px';
                        }
                    });
                }
                
                // Añadir swipe gestures para navegación
                addSwipeGestures();
            }
        }

        function addSwipeGestures() {
            let startX = 0;
            let startY = 0;
            let startTime = 0;
            
            document.addEventListener('touchstart', function(e) {
                const touch = e.touches[0];
                startX = touch.clientX;
                startY = touch.clientY;
                startTime = Date.now();
            }, { passive: true });
            
            document.addEventListener('touchend', function(e) {
                if (!startX || !startY) return;
                
                const touch = e.changedTouches[0];
                const endX = touch.clientX;
                const endY = touch.clientY;
                const endTime = Date.now();
                
                const diffX = startX - endX;
                const diffY = startY - endY;
                const diffTime = endTime - startTime;
                
                // Solo procesar swipes rápidos
                if (diffTime > 500) return;
                
                // Determinar dirección del swipe
                if (Math.abs(diffX) > Math.abs(diffY)) {
                    // Swipe horizontal
                    if (Math.abs(diffX) > 50) {
                        if (diffX > 0) {
                            // Swipe hacia la izquierda
                            handleSwipeLeft();
                        } else {
                            // Swipe hacia la derecha
                            handleSwipeRight();
                        }
                    }
                }
                
                startX = 0;
                startY = 0;
                startTime = 0;
            }, { passive: true });
        }
        
        function handleSwipeLeft() {
            // Cerrar menú móvil si está abierto
            if (mobileSidebar && mobileSidebar.classList.contains('active')) {
                closeMobileMenu();
            }
        }
        
        function handleSwipeRight() {
            // Abrir menú móvil si está cerrado y estamos en móvil
            if (window.innerWidth <= 991 && mobileSidebar && !mobileSidebar.classList.contains('active')) {
                // Solo abrir si el swipe empieza desde el borde izquierdo
                if (startX < 50) {
                    openMobileMenu();
                }
            }
        }

        // Mejorar rendimiento de scroll
        function optimizeScrollPerformance() {
            let ticking = false;
            
            function updateScrollState() {
                // Actualizar indicadores de scroll en tablas
                const tableContainers = document.querySelectorAll('.table-responsive');
                tableContainers.forEach(container => {
                    const scrollLeft = container.scrollLeft;
                    const maxScroll = container.scrollWidth - container.clientWidth;
                    
                    // Actualizar sombras de scroll
                    const leftShadow = container.querySelector('.scroll-shadow-left');
                    const rightShadow = container.querySelector('.scroll-shadow-right');
                    
                    if (leftShadow) {
                        leftShadow.style.opacity = scrollLeft > 0 ? '1' : '0';
                    }
                    if (rightShadow) {
                        rightShadow.style.opacity = scrollLeft < maxScroll - 5 ? '1' : '0';
                    }
                });
                
                ticking = false;
            }
            
            function requestTick() {
                if (!ticking) {
                    requestAnimationFrame(updateScrollState);
                    ticking = true;
                }
            }
            
            // Escuchar eventos de scroll
            document.addEventListener('scroll', requestTick, { passive: true });
            
            // Escuchar scroll en elementos específicos
            const scrollableElements = document.querySelectorAll('.table-responsive, .mobile-sidebar');
            scrollableElements.forEach(element => {
                element.addEventListener('scroll', requestTick, { passive: true });
            });
        }

        // Mejorar la experiencia de modales en móvil
        function enhanceMobileModals() {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                modal.addEventListener('shown.bs.modal', function() {
                    // Enfocar el primer elemento interactivo
                    const firstInput = this.querySelector('input, select, textarea, button');
                    if (firstInput && window.innerWidth <= 768) {
                        setTimeout(() => firstInput.focus(), 100);
                    }
                    
                    // Prevenir scroll del body
                    document.body.style.overflow = 'hidden';
                    document.body.style.position = 'fixed';
                    document.body.style.width = '100%';
                });
                
                modal.addEventListener('hidden.bs.modal', function() {
                    // Restaurar scroll del body
                    document.body.style.overflow = '';
                    document.body.style.position = '';
                    document.body.style.width = '';
                });
            });
        }

        // Mejorar feedback de carga para formularios
        function enhanceFormFeedback() {
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    const submitButton = this.querySelector('button[type="submit"], input[type="submit"]');
                    if (submitButton && this.checkValidity()) {
                        submitButton.classList.add('loading');
                        submitButton.disabled = true;
                        
                        // Restaurar estado después de 5 segundos (fallback)
                        setTimeout(() => {
                            submitButton.classList.remove('loading');
                            submitButton.disabled = false;
                        }, 5000);
                    }
                });
            });
        }

        // Mejorar indicadores de conectividad
        function addConnectivityIndicators() {
            function updateOnlineStatus() {
                const isOnline = navigator.onLine;
                if (!isOnline) {
                    showOfflineIndicator();
                } else {
                    hideOfflineIndicator();
                }
            }
            
            function showOfflineIndicator() {
                let indicator = document.getElementById('offline-indicator');
                if (!indicator) {
                    indicator = document.createElement('div');
                    indicator.id = 'offline-indicator';
                    indicator.innerHTML = '<i class="fas fa-wifi-slash"></i> Sin conexión';
                    indicator.style.cssText = `
                        position: fixed;
                        top: 10px;
                        left: 50%;
                        transform: translateX(-50%);
                        background: #dc3545;
                        color: white;
                        padding: 8px 16px;
                        border-radius: 20px;
                        font-size: 12px;
                        z-index: 9999;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
                    `;
                    document.body.appendChild(indicator);
                }
            }
            
            function hideOfflineIndicator() {
                const indicator = document.getElementById('offline-indicator');
                if (indicator) {
                    indicator.remove();
                }
            }
            
            window.addEventListener('online', updateOnlineStatus);
            window.addEventListener('offline', updateOnlineStatus);
            updateOnlineStatus();
        }

        // Inicializar todas las mejoras cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', function() {
            initializeTouchEnhancements();
            optimizeScrollPerformance();
            enhanceMobileModals();
            enhanceFormFeedback();
            addConnectivityIndicators();
        });

        // Manejar cambios de orientación
        window.addEventListener('orientationchange', function() {
            setTimeout(() => {
                // Recalcular layout
                window.scrollTo(0, 0);
                
                // Cerrar menú móvil si está abierto
                if (mobileSidebar && mobileSidebar.classList.contains('active')) {
                    closeMobileMenu();
                }
                
                // Forzar repaint para mejor rendimiento
                document.body.style.display = 'none';
                document.body.offsetHeight;
                document.body.style.display = '';
            }, 100);
        });

        // Optimizar rendimiento en dispositivos de baja potencia
        if (navigator.hardwareConcurrency && navigator.hardwareConcurrency <= 2) {
            // Reducir animaciones en dispositivos lentos
            document.documentElement.style.setProperty('--animation-duration', '0.1s');
            
            // Deshabilitar algunas animaciones complejas
            const style = document.createElement('style');
            style.textContent = `
                .dashboard-card:hover,
                .btn:hover,
                .nav-item:hover {
                    transform: none !important;
                }
            `;
            document.head.appendChild(style);
        }

        // Función para toggle del modal de notificaciones
        function toggleNotifications() {
            // Inicializar modal si no está inicializado
            if (!notificacionesModal) {
                const modalElement = document.getElementById('notificacionesModal');
                if (modalElement) {
                    notificacionesModal = new bootstrap.Modal(modalElement);
                } else {
                    console.error('Modal de notificaciones no encontrado');
                    return;
                }
            }
            
            cargarNotificaciones();
            notificacionesModal.show();
        }

        // Actualizar conteo de notificaciones
        async function actualizarConteoNotificaciones() {
            try {
                const response = await fetch('/Notificacion/ObtenerConteoNoLeidas');
                const result = await response.json();
                
                if (result.success) {
                    const badge = document.getElementById('notificationBadge');
                    const mobileBadge = document.getElementById('mobileNotificationBadge');
                    conteoActual = result.cantidad;
                    
                    if (conteoActual > 0) {
                        // Actualizar badge de escritorio
                        if (badge) {
                            badge.textContent = conteoActual;
                            badge.style.display = 'inline-block';
                        }
                        
                        // Actualizar badge móvil
                        if (mobileBadge) {
                            mobileBadge.textContent = conteoActual;
                            mobileBadge.style.display = 'flex';
                        }
                    } else {
                        // Ocultar ambos badges
                        if (badge) {
                            badge.style.display = 'none';
                        }
                        if (mobileBadge) {
                            mobileBadge.style.display = 'none';
                        }
                    }
                }
            } catch (error) {
                console.error('Error actualizando conteo de notificaciones:', error);
            }
        }

        // Cargar notificaciones en el modal
        async function cargarNotificaciones() {
            try {
                const listaDiv = document.getElementById('listaNotificaciones');
                listaDiv.innerHTML = `
                    <div class="text-center p-4">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p class="mt-2">Cargando notificaciones...</p>
                    </div>
                `;

                const response = await fetch('/Notificacion/ObtenerTodasLasNotificaciones');
                const result = await response.json();
                
                if (result.success) {
                    const notificaciones = result.notificaciones;
                    document.getElementById('totalNotificaciones').textContent = 
                        `${notificaciones.length} notificación${notificaciones.length !== 1 ? 'es' : ''}`;
                    
                    if (notificaciones.length === 0) {
                        listaDiv.innerHTML = `
                            <div class="text-center p-4 text-muted">
                                <i class="fas fa-bell-slash fa-3x mb-3"></i>
                                <p>No tienes notificaciones</p>
                            </div>
                        `;
                    } else {
                        let html = '';
                        notificaciones.forEach(notif => {
                            const iconoTipo = obtenerIconoNotificacion(notif.tipo);
                            const claseLeida = notif.leido ? 'notification-read' : 'notification-unread';
                            
                            html += `
                                <div class="notification-item ${claseLeida} p-3 border-bottom" data-id="${notif.id}">
                                    <div class="d-flex">
                                        <div class="notification-icon me-3">
                                            <i class="${iconoTipo}"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <p class="mb-1">${notif.mensaje}</p>
                                            <small class="text-muted">${notif.fechaHora}</small>
                                        </div>
                                        ${!notif.leido ? `
                                            <div class="notification-actions">
                                                <button class="btn btn-sm btn-outline-primary" onclick="marcarComoLeida(${notif.id})">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                        });
                        listaDiv.innerHTML = html;
                    }
                } else {
                    listaDiv.innerHTML = `
                        <div class="text-center p-4 text-danger">
                            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                            <p>Error al cargar notificaciones</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error cargando notificaciones:', error);
                document.getElementById('listaNotificaciones').innerHTML = `
                    <div class="text-center p-4 text-danger">
                        <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                        <p>Error al cargar notificaciones</p>
                    </div>
                `;
            }
        }

        // Marcar notificación como leída
        async function marcarComoLeida(notificacionId) {
            try {
                const response = await fetch('/Notificacion/MarcarComoLeida', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(notificacionId)
                });
                
                if (response.ok) {
                    // Actualizar la UI
                    const notifElement = document.querySelector(`[data-id="${notificacionId}"]`);
                    if (notifElement) {
                        notifElement.classList.remove('notification-unread');
                        notifElement.classList.add('notification-read');
                        notifElement.querySelector('.notification-actions').remove();
                    }
                    
                    // Actualizar conteo
                    actualizarConteoNotificaciones();
                }
            } catch (error) {
                console.error('Error marcando como leída:', error);
            }
        }

        // Marcar todas como leídas
        async function marcarTodasComoLeidas() {
            try {
                const response = await fetch('/Notificacion/MarcarTodasComoLeidas', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    // Recargar notificaciones
                    cargarNotificaciones();
                    actualizarConteoNotificaciones();
                }
            } catch (error) {
                console.error('Error marcando todas como leídas:', error);
            }
        }

        // Obtener icono según tipo de notificación
        function obtenerIconoNotificacion(tipo) {
            const iconos = {
                'NUEVA_ENTREGA': 'fas fa-tasks text-primary',
                'RETROALIMENTACION_ENTREGA': 'fas fa-comment text-info',
                'ENTREGA_REVISADA': 'fas fa-check-circle text-success',
                'SOLICITUD_ACEPTADA': 'fas fa-user-check text-success',
                'NUEVA_SOLICITUD_GRUPO': 'fas fa-user-plus text-warning',
                'RECORDATORIO_ENTREGA': 'fas fa-clock text-warning',
                'GRUPO_ASIGNADO': 'fas fa-users text-info',
                'ENTREGABLE_RECIBIDO': 'fas fa-file-upload text-primary'
            };
            return iconos[tipo] || 'fas fa-bell text-secondary';
        }

        // Limpiar backdrops residuales
        $(document).ready(function() {
            $('.modal').on('hidden.bs.modal', function () {
                $('.modal-backdrop').remove();
                $('body').removeClass('modal-open').css({
                    'overflow': '',
                    'padding-right': ''
                });
            });
        });
        
        // Fix adicional para cuando la página se carga con backdrop residual
        document.addEventListener('DOMContentLoaded', function() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });

        // Funciones globales de notificaciones
        function mostrarNotificacion(mensaje, tipo) {
            // Crear elemento de notificación
            const notificacion = document.createElement('div');
            notificacion.className = `alert alert-${tipo === 'success' ? 'success' : 'danger'} alert-dismissible fade show notification-toast`;
            notificacion.innerHTML = `
                <i class="fas fa-${tipo === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            // Agregar al DOM
            document.body.appendChild(notificacion);
            
            // Auto-eliminar después de 5 segundos
            setTimeout(() => {
                if (notificacion.parentNode) {
                    notificacion.remove();
                }
            }, 5000);
        }

        function mostrarExito(mensaje) {
            mostrarNotificacion(mensaje, 'success');
        }

        function mostrarError(mensaje) {
            mostrarNotificacion(mensaje, 'error');
        }

        function mostrarInfo(mensaje) {
            const notificacion = document.createElement('div');
            notificacion.className = 'alert alert-info alert-dismissible fade show notification-toast';
            notificacion.innerHTML = `
                <i class="fas fa-info-circle"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(notificacion);
            setTimeout(() => {
                if (notificacion.parentNode) {
                    notificacion.remove();
                }
            }, 5000);
        }

        function mostrarAdvertencia(mensaje) {
            const notificacion = document.createElement('div');
            notificacion.className = 'alert alert-warning alert-dismissible fade show notification-toast';
            notificacion.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(notificacion);
            setTimeout(() => {
                if (notificacion.parentNode) {
                    notificacion.remove();
                }
            }, 5000);
        }

        // Función global para mostrar/ocultar contraseñas
        function togglePasswordVisibility(passwordFieldId, iconId) {
            const passwordField = document.getElementById(passwordFieldId);
            const icon = document.getElementById(iconId);
            
            if (passwordField && icon) {
                if (passwordField.type === 'password') {
                    passwordField.type = 'text';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                } else {
                    passwordField.type = 'password';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                }
            }
        }
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
