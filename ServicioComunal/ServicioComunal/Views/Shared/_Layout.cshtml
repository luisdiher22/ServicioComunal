@using Microsoft.AspNetCore.Http
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Servicio Comunal</title>
    
    <!-- Google Fonts - Fira Sans -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    
    <!-- Bootstrap y Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- SweetAlert2 -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    
    <!-- Estilos personalizados -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    @if (ViewData["IsLogin"] as bool? == true)
    {
        <main role="main">
            @RenderBody()
        </main>
    }
    else
    {
        <!-- Header -->
        <header class="@((Context.Session.GetString("UsuarioRol") == "Tutor") ? "dashboard-header tutor-theme" : "dashboard-header")">
            <div class="header-content">
                <div class="header-left">
                    <img src="~/images/logo-liceo.svg" alt="Logo" class="header-logo">
                    <span class="header-title">Servicio Comunal</span>
                    <span class="header-subtitle">@(Context.Session.GetString("UsuarioNombreCompleto") ?? "Usuario")</span>
                </div>
                <div class="header-right">
                    <div class="header-user">
                        <i class="fas fa-user-circle"></i>
                        <span>@(Context.Session.GetString("UsuarioRol") ?? "Administrador")</span>
                    </div>
                    <div class="header-notifications" onclick="toggleNotifications()">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
                    </div>
                </div>
            </div>
        </header>

        <div class="dashboard-container">
            <!-- Sidebar -->
            <aside class="@((Context.Session.GetString("UsuarioRol") == "Tutor") ? "sidebar tutor-theme" : "sidebar")">
                <nav class="sidebar-nav">
                    @if (Context.Session.GetString("UsuarioRol") == "Tutor")
                    {
                        <a href="@Url.Action("Dashboard", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Inicio</span>
                        </a>
                        <a href="@Url.Action("MisGrupos", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "MisGrupos" ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>Mis Grupos</span>
                        </a>
                        <a href="@Url.Action("Revisiones", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Revisiones" ? "active" : "")">
                            <i class="fas fa-clipboard-check"></i>
                            <span>Revisiones</span>
                        </a>
                        <a href="@Url.Action("Progreso", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "Progreso" ? "active" : "")">
                            <i class="fas fa-chart-line"></i>
                            <span>Progreso</span>
                        </a>
                        <a href="@Url.Action("MiPerfil", "Tutor")" class="nav-item @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tutor" && ViewContext.RouteData.Values["action"]?.ToString() == "MiPerfil" ? "active" : "")">
                            <i class="fas fa-user"></i>
                            <span>Mi Perfil</span>
                        </a>
                    }
                    else if (Context.Session.GetString("UsuarioRol") == "Estudiante")
                    {
                        <a href="@Url.Action("Dashboard", "Estudiante")" class="nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" || ViewContext.RouteData.Values["controller"]?.ToString() == "Anexo") && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Mi Dashboard</span>
                        </a>
                        <a href="@Url.Action("MiGrupo", "Estudiante")" class="nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante" || ViewContext.RouteData.Values["controller"]?.ToString() == "Anexo") && ViewContext.RouteData.Values["action"]?.ToString() == "MiGrupo" ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>Mi Grupo</span>
                        </a>
                        <a href="@Url.Action("MisEntregas", "Estudiante")" class="nav-item @((ViewContext.RouteData.Values["controller"]?.ToString() == "Estudiante") && (ViewContext.RouteData.Values["action"]?.ToString() == "MisEntregas" || ViewContext.RouteData.Values["action"]?.ToString() == "DetalleEntrega") ? "active" : "")">
                            <i class="fas fa-file-alt"></i>
                            <span>Mis Entregas</span>
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("Dashboard", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Inicio</span>
                        </a>
                        <a href="@Url.Action("Estudiantes", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Estudiantes" ? "active" : "")">
                            <i class="fas fa-graduation-cap"></i>
                            <span>Estudiantes</span>
                        </a>
                        <a href="@Url.Action("GestionGrupos", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "GestionGrupos" ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>Gestión Grupos</span>
                        </a>
                        <a href="@Url.Action("AdministrarDocentes", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "AdministrarDocentes" ? "active" : "")">
                            <i class="fas fa-chalkboard-teacher"></i>
                            <span>Administrar Docentes</span>
                        </a>
                        <a href="@Url.Action("Usuarios", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Usuarios" ? "active" : "")">
                            <i class="fas fa-users-cog"></i>
                            <span>Usuarios</span>
                        </a>
                        <a href="@Url.Action("Formularios", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Formularios" ? "active" : "")">
                            <i class="fas fa-file-alt"></i>
                            <span>Formularios</span>
                        </a>
                        <a href="@Url.Action("Entregas", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Entregas" ? "active" : "")">
                            <i class="fas fa-tasks"></i>
                            <span>Entregas</span>
                        </a>
                        <a href="@Url.Action("Configuracion", "Home")" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Configuracion" ? "active" : "")">
                            <i class="fas fa-cog"></i>
                            <span>Configuración</span>
                        </a>
                    }
                </nav>
                <div class="sidebar-footer">
                    <a href="@Url.Action("Logout", "Auth")" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Cerrar Sesión</span>
                    </a>
                </div>
            </aside>

            <!-- Main Content -->
            <main class="main-content">
                @RenderBody()
            </main>
        </div>
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- Fix para modal backdrop que queda visible -->
    <script>
        // Limpiar modal backdrops cuando se cierran modales
        document.addEventListener('hidden.bs.modal', function (event) {
            // Eliminar cualquier backdrop que quede
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            
            // Restaurar scroll del body
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
        
        // Asegurar que los modales se abran correctamente
        document.addEventListener('show.bs.modal', function (event) {
            // Cerrar cualquier modal abierto antes de abrir uno nuevo
            const openModals = document.querySelectorAll('.modal.show');
            openModals.forEach(modal => {
                const modalInstance = bootstrap.Modal.getInstance(modal);
                if (modalInstance) {
                    modalInstance.hide();
                }
            });
        });
    </script>
    
    <!-- Modal de Notificaciones -->
    <div class="modal fade" id="notificacionesModal" tabindex="-1" aria-labelledby="notificacionesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificacionesModalLabel">
                        <i class="fas fa-bell"></i> Notificaciones
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span id="totalNotificaciones">0 notificaciones</span>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="marcarTodasComoLeidas()">
                            <i class="fas fa-check"></i> Marcar todas como leídas
                        </button>
                    </div>
                    <div id="listaNotificaciones">
                        <div class="text-center p-4">
                            <i class="fas fa-spinner fa-spin fa-2x"></i>
                            <p class="mt-2">Cargando notificaciones...</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variables globales para notificaciones
        let notificacionesModal;
        let conteoActual = 0;

        // Inicializar cuando se carga la página
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar notificaciones si no están deshabilitadas
            @if (ViewData["DisableNotifications"] as bool? != true)
            {
                <text>
                // Intentar inicializar modal
                const modalElement = document.getElementById('notificacionesModal');
                if (modalElement) {
                    notificacionesModal = new bootstrap.Modal(modalElement);
                }
                
                // Actualizar conteo de notificaciones
                actualizarConteoNotificaciones();
                
                // Actualizar cada 6 minutos
                setInterval(actualizarConteoNotificaciones, 360000);
                </text>
            }
        });

        // Función para toggle del modal de notificaciones
        function toggleNotifications() {
            // Inicializar modal si no está inicializado
            if (!notificacionesModal) {
                const modalElement = document.getElementById('notificacionesModal');
                if (modalElement) {
                    notificacionesModal = new bootstrap.Modal(modalElement);
                } else {
                    console.error('Modal de notificaciones no encontrado');
                    return;
                }
            }
            
            cargarNotificaciones();
            notificacionesModal.show();
        }

        // Actualizar conteo de notificaciones
        async function actualizarConteoNotificaciones() {
            try {
                const response = await fetch('/Notificacion/ObtenerConteoNoLeidas');
                const result = await response.json();
                
                if (result.success) {
                    const badge = document.getElementById('notificationBadge');
                    conteoActual = result.cantidad;
                    
                    if (conteoActual > 0) {
                        badge.textContent = conteoActual;
                        badge.style.display = 'inline-block';
                    } else {
                        badge.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('Error actualizando conteo de notificaciones:', error);
            }
        }

        // Cargar notificaciones en el modal
        async function cargarNotificaciones() {
            try {
                const listaDiv = document.getElementById('listaNotificaciones');
                listaDiv.innerHTML = `
                    <div class="text-center p-4">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p class="mt-2">Cargando notificaciones...</p>
                    </div>
                `;

                const response = await fetch('/Notificacion/ObtenerTodasLasNotificaciones');
                const result = await response.json();
                
                if (result.success) {
                    const notificaciones = result.notificaciones;
                    document.getElementById('totalNotificaciones').textContent = 
                        `${notificaciones.length} notificación${notificaciones.length !== 1 ? 'es' : ''}`;
                    
                    if (notificaciones.length === 0) {
                        listaDiv.innerHTML = `
                            <div class="text-center p-4 text-muted">
                                <i class="fas fa-bell-slash fa-3x mb-3"></i>
                                <p>No tienes notificaciones</p>
                            </div>
                        `;
                    } else {
                        let html = '';
                        notificaciones.forEach(notif => {
                            const iconoTipo = obtenerIconoNotificacion(notif.tipo);
                            const claseLeida = notif.leido ? 'notification-read' : 'notification-unread';
                            
                            html += `
                                <div class="notification-item ${claseLeida} p-3 border-bottom" data-id="${notif.id}">
                                    <div class="d-flex">
                                        <div class="notification-icon me-3">
                                            <i class="${iconoTipo}"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <p class="mb-1">${notif.mensaje}</p>
                                            <small class="text-muted">${notif.fechaHora}</small>
                                        </div>
                                        ${!notif.leido ? `
                                            <div class="notification-actions">
                                                <button class="btn btn-sm btn-outline-primary" onclick="marcarComoLeida(${notif.id})">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                        });
                        listaDiv.innerHTML = html;
                    }
                } else {
                    listaDiv.innerHTML = `
                        <div class="text-center p-4 text-danger">
                            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                            <p>Error al cargar notificaciones</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error cargando notificaciones:', error);
                document.getElementById('listaNotificaciones').innerHTML = `
                    <div class="text-center p-4 text-danger">
                        <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                        <p>Error al cargar notificaciones</p>
                    </div>
                `;
            }
        }

        // Marcar notificación como leída
        async function marcarComoLeida(notificacionId) {
            try {
                const response = await fetch('/Notificacion/MarcarComoLeida', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(notificacionId)
                });
                
                if (response.ok) {
                    // Actualizar la UI
                    const notifElement = document.querySelector(`[data-id="${notificacionId}"]`);
                    if (notifElement) {
                        notifElement.classList.remove('notification-unread');
                        notifElement.classList.add('notification-read');
                        notifElement.querySelector('.notification-actions').remove();
                    }
                    
                    // Actualizar conteo
                    actualizarConteoNotificaciones();
                }
            } catch (error) {
                console.error('Error marcando como leída:', error);
            }
        }

        // Marcar todas como leídas
        async function marcarTodasComoLeidas() {
            try {
                const response = await fetch('/Notificacion/MarcarTodasComoLeidas', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    // Recargar notificaciones
                    cargarNotificaciones();
                    actualizarConteoNotificaciones();
                }
            } catch (error) {
                console.error('Error marcando todas como leídas:', error);
            }
        }

        // Obtener icono según tipo de notificación
        function obtenerIconoNotificacion(tipo) {
            const iconos = {
                'NUEVA_ENTREGA': 'fas fa-tasks text-primary',
                'RETROALIMENTACION_ENTREGA': 'fas fa-comment text-info',
                'ENTREGA_REVISADA': 'fas fa-check-circle text-success',
                'SOLICITUD_ACEPTADA': 'fas fa-user-check text-success',
                'NUEVA_SOLICITUD_GRUPO': 'fas fa-user-plus text-warning',
                'RECORDATORIO_ENTREGA': 'fas fa-clock text-warning',
                'GRUPO_ASIGNADO': 'fas fa-users text-info',
                'ENTREGABLE_RECIBIDO': 'fas fa-file-upload text-primary'
            };
            return iconos[tipo] || 'fas fa-bell text-secondary';
        }

        // Limpiar backdrops residuales
        $(document).ready(function() {
            $('.modal').on('hidden.bs.modal', function () {
                $('.modal-backdrop').remove();
                $('body').removeClass('modal-open').css({
                    'overflow': '',
                    'padding-right': ''
                });
            });
        });
        
        // Fix adicional para cuando la página se carga con backdrop residual
        document.addEventListener('DOMContentLoaded', function() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });

        // Funciones globales de notificaciones
        function mostrarNotificacion(mensaje, tipo) {
            // Crear elemento de notificación
            const notificacion = document.createElement('div');
            notificacion.className = `alert alert-${tipo === 'success' ? 'success' : 'danger'} alert-dismissible fade show notification-toast`;
            notificacion.innerHTML = `
                <i class="fas fa-${tipo === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            // Agregar al DOM
            document.body.appendChild(notificacion);
            
            // Auto-eliminar después de 5 segundos
            setTimeout(() => {
                if (notificacion.parentNode) {
                    notificacion.remove();
                }
            }, 5000);
        }

        function mostrarExito(mensaje) {
            mostrarNotificacion(mensaje, 'success');
        }

        function mostrarError(mensaje) {
            mostrarNotificacion(mensaje, 'error');
        }

        function mostrarInfo(mensaje) {
            const notificacion = document.createElement('div');
            notificacion.className = 'alert alert-info alert-dismissible fade show notification-toast';
            notificacion.innerHTML = `
                <i class="fas fa-info-circle"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(notificacion);
            setTimeout(() => {
                if (notificacion.parentNode) {
                    notificacion.remove();
                }
            }, 5000);
        }

        function mostrarAdvertencia(mensaje) {
            const notificacion = document.createElement('div');
            notificacion.className = 'alert alert-warning alert-dismissible fade show notification-toast';
            notificacion.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(notificacion);
            setTimeout(() => {
                if (notificacion.parentNode) {
                    notificacion.remove();
                }
            }, 5000);
        }
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
