@{
    ViewData["Title"] = "Gesti√≥n de Grupos - Administraci√≥n";
}

<!DOCTYPE html>
<html>
<head>
    <title>Panel de Administraci√≥n - Gesti√≥n de Grupos</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow">
                    <div class="card-header bg-danger text-white">
                        <h2 class="mb-0">
                            <i class="fas fa-tools"></i> Panel de Administraci√≥n - Gesti√≥n de Grupos
                        </h2>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>¬°Atenci√≥n!</strong> Estas acciones afectar√°n permanentemente la base de datos.
                        </div>

                        <!-- Estado Actual -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h4><i class="fas fa-info-circle"></i> Estado Actual</h4>
                                <button class="btn btn-info" onclick="verificarEstado()">
                                    <i class="fas fa-search"></i> Verificar Estado de Grupos
                                </button>
                                <div id="estadoActual" class="mt-3"></div>
                            </div>
                        </div>

                        <!-- Acciones -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card border-danger">
                                    <div class="card-header bg-danger text-white">
                                        <h5><i class="fas fa-broom"></i> Limpiar y Recrear</h5>
                                    </div>
                                    <div class="card-body">
                                        <p>Esta acci√≥n eliminar√°:</p>
                                        <ul>
                                            <li>Todas las solicitudes</li>
                                            <li>Todos los grupos existentes</li>
                                            <li>Todas las relaciones grupo-estudiante</li>
                                            <li>Todas las entregas</li>
                                            <li>Todas las notificaciones</li>
                                        </ul>
                                        <p><strong>Y crear√° nuevos grupos con l√≠deres asignados autom√°ticamente.</strong></p>
                                        <button class="btn btn-danger btn-lg" onclick="limpiarYReiniciar()">
                                            <i class="fas fa-trash-alt"></i> Limpiar y Recrear Grupos
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-info">
                                    <div class="card-header bg-info text-white">
                                        <h5><i class="fas fa-users"></i> Informaci√≥n</h5>
                                    </div>
                                    <div class="card-body">
                                        <h6>¬øQu√© hace la recreaci√≥n?</h6>
                                        <ul>
                                            <li>Agrupa estudiantes en grupos de m√°ximo 4</li>
                                            <li>El primer estudiante de cada grupo es el l√≠der</li>
                                            <li>Se asignan n√∫meros de grupo secuenciales</li>
                                            <li>Los estudiantes restantes quedan sin grupo</li>
                                        </ul>
                                        <p><strong>Los l√≠deres tendr√°n control total sobre su grupo.</strong></p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Resultados -->
                        <div class="row mt-4">
                            <div class="col-md-12">
                                <div id="resultados"></div>
                            </div>
                        </div>

                        <!-- Navegaci√≥n -->
                        <div class="row mt-4">
                            <div class="col-md-12 text-center">
                                <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">
                                    <i class="fas fa-home"></i> Volver al Inicio
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Gesti√≥n Detallada de Grupo -->
    <div class="modal fade" id="modalDetallesGrupo" tabindex="-1" aria-labelledby="modalDetallesGrupoLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalDetallesGrupoLabel">
                        <i class="fas fa-users-cog"></i> Gesti√≥n de Grupo
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="contenidoDetallesGrupo">
                        <!-- El contenido se carga din√°micamente -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-info" onclick="verificarEstado(); bootstrap.Modal.getInstance(document.getElementById('modalDetallesGrupo')).hide();">
                        <i class="fas fa-refresh"></i> Actualizar Lista Principal
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function verificarEstado() {
            $('#estadoActual').html('<div class="d-flex justify-content-center"><div class="spinner-border" role="status"></div></div>');
            
            fetch('@Url.Action("VerificarEstadoGrupos", "Admin")')
                .then(response => response.json())
                .then(data => {
                    if (data.success === false) {
                        $('#estadoActual').html(`
                            <div class="alert alert-danger">
                                <i class="fas fa-times"></i> Error: ${data.message}
                            </div>
                        `);
                        return;
                    }

                    let html = `
                        <div class="alert alert-info">
                            <h5><i class="fas fa-chart-bar"></i> Estad√≠sticas Actuales</h5>
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>Total Grupos:</strong> ${data.totalGrupos}<br>
                                    <strong>Con L√≠der:</strong> ${data.gruposConLider}<br>
                                    <strong>Sin L√≠der:</strong> ${data.gruposSinLider}
                                </div>
                                <div class="col-md-3">
                                    <strong>Total Estudiantes:</strong> ${data.totalEstudiantes}<br>
                                    <strong>En Grupos:</strong> ${data.estudiantesEnGrupos}<br>
                                    <strong>Sin Grupo:</strong> ${data.estudiantesSinGrupo}
                                </div>
                                <div class="col-md-3">
                                    <strong>Solicitudes:</strong> ${data.totalSolicitudes}
                                </div>
                            </div>
                        </div>
                    `;

                    if (data.grupos && data.grupos.length > 0) {
                        html += '<div class="mt-3"><h6>Grupos Existentes:</h6>';
                        data.grupos.forEach(grupo => {
                            let badgeClass = grupo.tieneLider ? 'badge bg-success' : 'badge bg-danger';
                            let liderInfo = grupo.tieneLider ? `üëë ${grupo.nombreLider}` : '‚ùå Sin l√≠der';
                            
                            html += `
                                <div class="card mb-2">
                                    <div class="card-body py-2">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>Grupo ${grupo.numero}</strong> - ${grupo.cantidadMiembros} miembros
                                                <br><small class="text-muted">${liderInfo}</small>
                                            </div>
                                            <div>
                                                <span class="${badgeClass}">${grupo.cantidadMiembros}/4</span>
                                                <button class="btn btn-sm btn-outline-primary ms-2" onclick="verDetallesGrupo(${grupo.numero})">
                                                    <i class="fas fa-eye"></i> Ver Detalles
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        html += '</div>';
                    }

                    $('#estadoActual').html(html);
                })
                .catch(error => {
                    $('#estadoActual').html(`
                        <div class="alert alert-danger">
                            <i class="fas fa-times"></i> Error al verificar estado: ${error.message}
                        </div>
                    `);
                });
        }

        function limpiarYReiniciar() {
            if (!confirm('¬øEst√°s COMPLETAMENTE SEGURO de que quieres eliminar todos los grupos y solicitudes existentes y crear nuevos grupos con l√≠deres? Esta acci√≥n NO se puede deshacer.')) {
                return;
            }

            if (!confirm('Esta es tu √∫ltima oportunidad para cancelar. ¬øProceder con la limpieza completa?')) {
                return;
            }

            $('#resultados').html(`
                <div class="alert alert-warning">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-3" role="status"></div>
                        <span>Procesando limpieza y recreaci√≥n de grupos... Esto puede tardar unos momentos.</span>
                    </div>
                </div>
            `);

            fetch('@Url.Action("LimpiarYReiniciarGrupos", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    $('#resultados').html(`
                        <div class="alert alert-success">
                            <h5><i class="fas fa-check-circle"></i> ¬°Proceso Completado!</h5>
                            <p>${data.message}</p>
                            <button class="btn btn-success" onclick="verificarEstado()">
                                <i class="fas fa-refresh"></i> Verificar Nuevos Grupos
                            </button>
                        </div>
                    `);
                } else {
                    $('#resultados').html(`
                        <div class="alert alert-danger">
                            <h5><i class="fas fa-times-circle"></i> Error</h5>
                            <p>${data.message}</p>
                        </div>
                    `);
                }
            })
            .catch(error => {
                $('#resultados').html(`
                    <div class="alert alert-danger">
                        <h5><i class="fas fa-times-circle"></i> Error de Conexi√≥n</h5>
                        <p>Error al procesar la solicitud: ${error.message}</p>
                    </div>
                `);
            });
        }

        // Cargar estado inicial al cargar la p√°gina
        $(document).ready(function() {
            verificarEstado();
        });

        function verDetallesGrupo(grupoNumero) {
            $('#contenidoDetallesGrupo').html('<div class="d-flex justify-content-center"><div class="spinner-border" role="status"></div></div>');
            
            // Mostrar modal usando Bootstrap 5
            const modal = new bootstrap.Modal(document.getElementById('modalDetallesGrupo'));
            modal.show();
            
            fetch(`@Url.Action("ObtenerDetallesGrupo", "Admin")?grupoNumero=${grupoNumero}`)
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        $('#contenidoDetallesGrupo').html(`
                            <div class="alert alert-danger">
                                <i class="fas fa-times"></i> Error: ${data.message}
                            </div>
                        `);
                        return;
                    }

                    const grupo = data.grupo;
                    let liderActual = grupo.miembros.find(m => m.esLider);
                    
                    let html = `
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-users"></i> Grupo ${grupo.numero}
                                    ${grupo.liderIdentificacion ? `<small class="float-end">üëë L√≠der: ${grupo.nombreLider}</small>` : '<small class="float-end text-warning">‚ö†Ô∏è Sin l√≠der</small>'}
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <strong>Miembros:</strong> ${grupo.cantidadMiembros}/4
                                    </div>
                                    <div class="col-md-4">
                                        <strong>Entregas:</strong> ${grupo.cantidadEntregas}
                                    </div>
                                    <div class="col-md-4">
                                        <strong>Tutor:</strong> ${grupo.tieneTutor ? 'S√≠' : 'No'}
                                    </div>
                                </div>
                    `;

                    if (grupo.miembros && grupo.miembros.length > 0) {
                        html += `
                            <h6><i class="fas fa-users"></i> Miembros del Grupo:</h6>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Estudiante</th>
                                            <th>Clase</th>
                                            <th>Rol</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                        `;

                        grupo.miembros.forEach(miembro => {
                            let iconoRol = miembro.esLider ? 'üëë' : 'üë§';
                            let textoRol = miembro.esLider ? 'L√≠der' : 'Miembro';
                            let badgeClass = miembro.esLider ? 'bg-warning' : 'bg-secondary';
                            
                            html += `
                                <tr>
                                    <td>
                                        ${iconoRol} <strong>${miembro.nombreCompleto}</strong>
                                    </td>
                                    <td>${miembro.clase}</td>
                                    <td>
                                        <span class="badge ${badgeClass}">${textoRol}</span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                            `;
                            
                            if (!miembro.esLider) {
                                html += `
                                    <button class="btn btn-outline-warning" onclick="cambiarLider(${grupo.numero}, ${miembro.estudianteId}, '${miembro.nombreCompleto}')" title="Hacer l√≠der">
                                        <i class="fas fa-crown"></i>
                                    </button>
                                `;
                            }
                            
                            html += `
                                    <button class="btn btn-outline-danger" onclick="eliminarEstudiante(${grupo.numero}, ${miembro.estudianteId}, '${miembro.nombreCompleto}', ${miembro.esLider})" title="Eliminar del grupo">
                                        <i class="fas fa-user-times"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                            `;
                        });

                        html += `
                                    </tbody>
                                </table>
                            </div>
                        `;
                    } else {
                        html += `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle"></i> Este grupo no tiene miembros.
                            </div>
                        `;
                    }

                    html += `
                            </div>
                        </div>
                    `;

                    $('#contenidoDetallesGrupo').html(html);
                })
                .catch(error => {
                    $('#contenidoDetallesGrupo').html(`
                        <div class="alert alert-danger">
                            <i class="fas fa-times"></i> Error al cargar detalles: ${error.message}
                        </div>
                    `);
                });
        }

        function eliminarEstudiante(grupoNumero, estudianteId, nombreEstudiante, esLider) {
            let mensaje = `¬øEst√°s seguro de que quieres eliminar a "${nombreEstudiante}" del Grupo ${grupoNumero}?`;
            
            if (esLider) {
                mensaje += '\n\n‚ö†Ô∏è ATENCI√ìN: Este estudiante es el l√≠der del grupo. Si lo eliminas, el liderazgo se asignar√° autom√°ticamente a otro miembro (si los hay).';
            }
            
            if (!confirm(mensaje)) {
                return;
            }

            fetch('@Url.Action("EliminarEstudianteDeGrupo", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    grupoNumero: grupoNumero,
                    estudianteId: estudianteId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`‚úÖ ${data.message}`);
                    // Recargar detalles del grupo
                    verDetallesGrupo(grupoNumero);
                } else {
                    alert(`‚ùå Error: ${data.message}`);
                }
            })
            .catch(error => {
                alert(`‚ùå Error de conexi√≥n: ${error.message}`);
            });
        }

        function cambiarLider(grupoNumero, nuevoLiderId, nombreNuevoLider) {
            if (!confirm(`¬øEst√°s seguro de que quieres hacer a "${nombreNuevoLider}" el nuevo l√≠der del Grupo ${grupoNumero}?`)) {
                return;
            }

            fetch('@Url.Action("CambiarLiderGrupo", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    grupoNumero: grupoNumero,
                    nuevoLiderId: nuevoLiderId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`‚úÖ ${data.message}`);
                    // Recargar detalles del grupo
                    verDetallesGrupo(grupoNumero);
                } else {
                    alert(`‚ùå Error: ${data.message}`);
                }
            })
            .catch(error => {
                alert(`‚ùå Error de conexi√≥n: ${error.message}`);
            });
        }
    </script>
</body>
</html>
