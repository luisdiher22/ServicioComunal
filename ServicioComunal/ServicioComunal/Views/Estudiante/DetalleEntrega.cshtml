@model ServicioComunal.Models.Entrega
@{
    ViewData["Title"] = "Detalle de Entrega - Estudiante";
    var estudiante = ViewBag.Estudiante as ServicioComunal.Models.Estudiante;
    var grupo = ViewBag.Grupo as ServicioComunal.Models.Grupo;
}

<div class="container-fluid estudiante-theme">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-2 sidebar">
            <div class="text-center mb-4">
                <img src="~/images/logo-liceo.svg" alt="Logo" style="width: 60px; height: 60px;">
                <h5 class="mt-2">@estudiante?.Nombre @estudiante?.Apellidos</h5>
                <small class="text-muted">Estudiante - @estudiante?.Clase</small>
            </div>

            <nav class="nav flex-column">
                <a class="nav-link" href="@Url.Action("Dashboard", "Estudiante")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
                <a class="nav-link" href="@Url.Action("MiGrupo", "Estudiante")">
                    <i class="fas fa-users"></i> Mi Grupo
                </a>
                <a class="nav-link active" href="@Url.Action("Entregas", "Estudiante")">
                    <i class="fas fa-file-upload"></i> Entregas
                </a>
                <a class="nav-link" href="@Url.Action("MisSolicitudes", "Estudiante")">
                    <i class="fas fa-bell"></i> Solicitudes
                </a>
                <a class="nav-link" href="@Url.Action("MiPerfil", "Estudiante")">
                    <i class="fas fa-user"></i> Mi Perfil
                </a>
                <hr>
                <a class="logout-btn" href="@Url.Action("Logout", "Auth")">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Cerrar Sesión</span>
                </a>
            </nav>
        </div>

        <!-- Contenido principal -->
        <div class="col-md-10 main-content">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2>@Model.Nombre</h2>
                    <small class="text-muted">Grupo @grupo?.Numero</small>
                </div>
                <a href="@Url.Action("Entregas", "Estudiante")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Volver a Entregas
                </a>
            </div>

            <!-- Información de la entrega -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle"></i> Información de la Entrega
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <h6><i class="fas fa-file-alt"></i> Descripción:</h6>
                                    <p class="mb-3">@Model.Descripcion</p>
                                </div>
                                <div class="col-md-4">
                                    <h6><i class="fas fa-calendar"></i> Fecha Límite:</h6>
                                    <p class="mb-3">
                                        @Model.FechaLimite.ToString("dd/MM/yyyy HH:mm")
                                        @if (Model.FechaLimite < DateTime.Now)
                                        {
                                            <br><span class="badge badge-danger"><i class="fas fa-exclamation-triangle"></i> Vencida</span>
                                        }
                                        else if (Model.FechaLimite <= DateTime.Now.AddDays(2))
                                        {
                                            <br><span class="badge badge-warning"><i class="fas fa-clock"></i> Próxima a vencer</span>
                                        }
                                        else
                                        {
                                            <br><span class="badge badge-success"><i class="fas fa-check"></i> En plazo</span>
                                        }
                                    </p>

                                    <h6><i class="fas fa-flag"></i> Estado:</h6>
                                    @if (!string.IsNullOrEmpty(Model.Retroalimentacion))
                                    {
                                        if (Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:"))
                                        {
                                            <span class="badge badge-danger p-2"><i class="fas fa-edit"></i> Requiere Cambios</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-success p-2"><i class="fas fa-check"></i> Revisada</span>
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(Model.ArchivoRuta))
                                    {
                                        <span class="badge badge-info p-2"><i class="fas fa-upload"></i> Enviada</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-warning p-2"><i class="fas fa-clock"></i> Pendiente</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Retroalimentación -->
            @if (!string.IsNullOrEmpty(Model.Retroalimentacion))
            {
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header @(Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:") ? "bg-warning" : "bg-info")">
                                <h5 class="mb-0">
                                    @if (Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:"))
                                    {
                                        <i class="fas fa-edit"></i><text> Cambios Solicitados por el Tutor</text>
                                    }
                                    else
                                    {
                                        <i class="fas fa-comments"></i><text> Retroalimentación del Tutor</text>
                                    }
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:"))
                                {
                                    <div class="alert alert-warning mb-3">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <strong>El tutor ha solicitado cambios en tu entrega.</strong> 
                                        Por favor, revisa los comentarios y sube una nueva versión corregida.
                                    </div>
                                    <p><strong>Comentarios del tutor:</strong></p>
                                    <p>@Model.Retroalimentacion.Replace("CAMBIOS SOLICITADOS: ", "")</p>
                                }
                                else
                                {
                                    <p>@Model.Retroalimentacion</p>
                                }
                                <small class="text-muted">
                                    <i class="fas fa-clock"></i> Fecha de revisión: @(Model.FechaRetroalimentacion?.ToString("dd/MM/yyyy HH:mm") ?? "No disponible")
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="row">
                <!-- Formulario/Anexo Interactivo (si aplica) -->
                @if ((Model.TipoAnexo > 0 || Model.FormularioIdentificacion.HasValue) && string.IsNullOrEmpty(Model.ArchivoRuta))
                {
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0">
                                    <i class="fas fa-file-pdf"></i> 
                                    @if (Model.FormularioIdentificacion.HasValue)
                                    {
                                        @:Formulario Requerido
                                    }
                                    else
                                    {
                                        @:Anexo #@Model.TipoAnexo Interactivo
                                    }
                                </h6>
                            </div>
                            <div class="card-body d-flex flex-column">
                                <div class="text-center flex-grow-1 d-flex flex-column justify-content-center">
                                    <i class="fas fa-file-alt fa-3x text-primary mb-3"></i>
                                    @if (Model.FormularioIdentificacion.HasValue)
                                    {
                                        <h6>Descargar Formulario</h6>
                                        <p class="text-muted mb-4">
                                            Descarga el formulario, resuélvelo
                                            y luego súbelo usando el formulario de "Mi Entrega" al lado.
                                        </p>
                                        
                                        <a href="@Url.Action("DescargarFormularioTemplate", "Estudiante", new { id = Model.FormularioIdentificacion })" 
                                           class="btn btn-primary btn-lg">
                                            <i class="fas fa-download"></i> Descargar Formulario
                                        </a>
                                    }
                                    else
                                    {
                                        <h6>Descargar Anexo #@Model.TipoAnexo</h6>
                                        <p class="text-muted mb-4">
                                            Descarga el documento, llénalo fuera del sistema 
                                            y luego súbelo usando el formulario de "Mi Entrega" al lado.
                                        </p>
                                        
                                        <a href="@Url.Action("DescargarAnexoTemplate", "Estudiante", new { tipoAnexo = Model.TipoAnexo })" 
                                           class="btn btn-primary btn-lg">
                                            <i class="fas fa-download"></i> Descargar Anexo
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Subir entrega -->
                <div class="col-md-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0">
                                <i class="fas fa-upload"></i> Mi Entrega
                            </h6>
                        </div>
                        <div class="card-body d-flex flex-column">
                            @if (!string.IsNullOrEmpty(Model.ArchivoRuta))
                            {
                                <div class="text-center mb-3">
                                    @if (!string.IsNullOrEmpty(Model.Retroalimentacion) && Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:"))
                                    {
                                        <i class="fas fa-exclamation-triangle fa-3x text-warning mb-2"></i>
                                        <h6 class="text-warning">Se Requieren Cambios</h6>
                                        <p class="text-muted">El tutor ha solicitado modificaciones. Puedes subir una nueva versión.</p>
                                    }
                                    else if (!string.IsNullOrEmpty(Model.Retroalimentacion))
                                    {
                                        <i class="fas fa-check-circle fa-3x text-success mb-2"></i>
                                        <h6 class="text-success">Entrega Aprobada</h6>
                                        <p class="text-muted">Tu entrega ha sido revisada y aprobada.</p>
                                    }
                                    else
                                    {
                                        <i class="fas fa-check-circle fa-3x text-success mb-2"></i>
                                        <h6 class="text-success">Entrega Realizada</h6>
                                        <p class="text-muted">Fecha: @(Model.FechaEntrega?.ToString("dd/MM/yyyy HH:mm") ?? "No disponible")</p>
                                    }
                                    
                                    <a href="@Url.Action("DescargarArchivo", "Estudiante", new { entregaId = Model.Identificacion, tipo = "entrega" })" 
                                       class="btn btn-outline-info mb-2">
                                        <i class="fas fa-download"></i> Descargar Mi Entrega
                                    </a>
                                    
                                    @if (Model.FormularioIdentificacion.HasValue)
                                    {
                                        <a href="@Url.Action("DescargarFormularioTemplate", "Estudiante", new { id = Model.FormularioIdentificacion })" 
                                           class="btn btn-outline-secondary mb-2">
                                            <i class="fas fa-file-pdf"></i> Descargar Formulario
                                        </a>
                                    }
                                    
                                    @if (Model.TipoAnexo > 0)
                                    {
                                        <a href="@Url.Action("DescargarAnexoTemplate", "Estudiante", new { tipoAnexo = Model.TipoAnexo })" 
                                           class="btn btn-outline-primary mb-2">
                                            <i class="fas fa-file-alt"></i> Descargar Anexo #@Model.TipoAnexo
                                        </a>
                                    }
                                </div>
                                
                                @if (!string.IsNullOrEmpty(Model.Retroalimentacion) && Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:"))
                                {
                                    <hr>
                                    @if (ViewBag.EsLider == true)
                                    {
                                        <p class="text-center text-warning"><strong>¿Necesitas subir una nueva versión?</strong></p>
                                    }
                                    else
                                    {
                                        <p class="text-center text-muted"><strong>El líder del grupo puede subir una nueva versión si es necesario</strong></p>
                                    }
                                }
                                else if (string.IsNullOrEmpty(Model.Retroalimentacion))
                                {
                                    <hr>
                                    @if (ViewBag.EsLider == true)
                                    {
                                        <p class="text-muted text-center">¿Necesitas subir una nueva versión?</p>
                                    }
                                    else
                                    {
                                        <p class="text-center text-muted">Solo el líder del grupo puede subir nuevas versiones</p>
                                    }
                                }
                            }

                            @if (string.IsNullOrEmpty(Model.ArchivoRuta) || 
                                (!string.IsNullOrEmpty(Model.Retroalimentacion) && Model.Retroalimentacion.StartsWith("CAMBIOS SOLICITADOS:")) ||
                                string.IsNullOrEmpty(Model.Retroalimentacion))
                            {
                                @if (ViewBag.EsLider == false)
                                {
                                    <div class="alert alert-warning text-center">
                                        <i class="fas fa-crown"></i>
                                        <strong>Solo el líder del grupo puede realizar entregas</strong>
                                        <p class="mb-0 mt-2">
                                            Las entregas deben ser realizadas únicamente por el estudiante líder del grupo. 
                                            Si necesitas subir una entrega, coordina con tu líder de grupo.
                                        </p>
                                    </div>
                                }
                                else
                                {
                                    @if (Model.TipoAnexo > 0)
                                    {
                                        <div class="alert alert-info text-center mb-3">
                                            <i class="fas fa-info-circle"></i>
                                            <strong>Nota:</strong> Esta entrega corresponde al Anexo #@Model.TipoAnexo. 
                                            Puedes descargar la plantilla arriba como referencia y luego subir tu entrega completada aquí.
                                        </div>
                                    }
                                    <form id="formSubirEntrega" enctype="multipart/form-data" class="flex-grow-1 d-flex flex-column">
                                        <div class="mb-3 flex-grow-1">
                                            <label for="archivoEntrega" class="form-label">Seleccionar archivo:</label>
                                            <input type="file" class="form-control" id="archivoEntrega" name="archivo" 
                                                   accept=".pdf,.doc,.docx,.txt,.zip,.rar" required>
                                            <small class="form-text text-muted">
                                                Formatos permitidos: PDF, DOC, DOCX, TXT, ZIP, RAR (Máx. 50MB)
                                            </small>
                                        </div>
                                        <div class="text-center">
                                            <button type="submit" class="btn btn-primary btn-lg" id="btnSubir">
                                                <i class="fas fa-upload"></i> 
                                                @if (!string.IsNullOrEmpty(Model.ArchivoRuta))
                                                {
                                                    <text>Subir Nueva Versión</text>
                                                }
                                                else
                                                {
                                                    <text>Subir Entrega</text>
                                                }
                                            </button>
                                        </div>
                                    </form>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .sidebar {
        min-height: 100vh;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    }

    .nav-link {
        color: #333;
        padding: 0.75rem 1rem;
        margin-bottom: 0.25rem;
        border-radius: 0.375rem;
        transition: all 0.3s ease;
    }

    .nav-link:hover {
        background-color: #f8f9fa;
        color: #007bff;
        transform: translateX(5px);
    }

    .nav-link.active {
        background-color: #007bff;
        color: white;
    }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .main-content {
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .badge {
        font-size: 0.85em;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('formSubirEntrega');
    const btnSubir = document.getElementById('btnSubir');
    
    // Verificar que los elementos existan antes de continuar
    if (!form) {
        console.log('Elemento formSubirEntrega no encontrado');
        return;
    }
    
    if (!btnSubir) {
        console.log('Elemento btnSubir no encontrado');
        return;
    }
    
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const archivoInput = document.getElementById('archivoEntrega');
        const archivo = archivoInput.files[0];
        
        if (!archivo) {
            Swal.fire({
                icon: 'warning',
                title: 'Archivo requerido',
                text: 'Por favor selecciona un archivo antes de continuar',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // Validar tamaño del archivo (50MB)
        if (archivo.size > 50 * 1024 * 1024) {
            Swal.fire({
                icon: 'error',
                title: 'Archivo muy grande',
                text: 'El archivo es demasiado grande. Máximo 50MB permitido.',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // Confirmar envío
        const confirmResult = await Swal.fire({
            title: '¿Confirmar envío de entrega?',
            text: `Se enviará el archivo "${archivo.name}" como tu entrega. Una vez enviado, tu tutor podrá revisarlo.`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#007bff',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Sí, enviar',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmResult.isConfirmed) {
            return;
        }

        try {
            btnSubir.disabled = true;

            const formData = new FormData();
            formData.append('archivo', archivo);
            formData.append('entregaId', '@Model.Identificacion');

            const response = await fetch('@Url.Action("SubirEntrega", "Estudiante")', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: formData
            });

            if (!response.ok) {
                throw new Error('Error HTTP: ' + response.status + ' - ' + response.statusText);
            }

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('La respuesta del servidor no es un JSON válido');
            }

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Entrega enviada!',
                    text: 'Tu entrega ha sido subida exitosamente. Tu tutor será notificado para su revisión.',
                    showConfirmButton: false,
                    timer: 2000
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error al enviar',
                    text: result.message,
                    confirmButtonText: 'Entendido'
                });
            }
        } catch (error) {
            if (error.message.includes('JSON')) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error de comunicación',
                    text: 'Error de comunicación con el servidor. Por favor, recarga la página e intenta nuevamente.',
                    confirmButtonText: 'Entendido'
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error al subir entrega',
                    text: 'Error al subir la entrega: ' + error.message,
                    confirmButtonText: 'Entendido'
                });
            }
        } finally {
            btnSubir.disabled = false;
        }
    });
});
</script>
